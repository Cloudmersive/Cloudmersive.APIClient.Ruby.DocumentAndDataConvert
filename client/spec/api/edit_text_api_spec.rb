=begin
#convertapi

#Convert API lets you effortlessly convert file formats and types.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for CloudmersiveConvertApiClient::EditTextApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'EditTextApi' do
  before do
    # run before each test
    @instance = CloudmersiveConvertApiClient::EditTextApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of EditTextApi' do
    it 'should create an instance of EditTextApi' do
      expect(@instance).to be_instance_of(CloudmersiveConvertApiClient::EditTextApi)
    end
  end

  # unit tests for edit_text_base64_decode
  # Base 64 decode, convert base 64 string to binary content
  # Decodes / converts base 64 UTF-8 text string to binary content
  # @param request Input request
  # @param [Hash] opts the optional parameters
  # @return [Base64DecodeResponse]
  describe 'edit_text_base64_decode test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_text_base64_detect
  # Detect, check if text string is base 64 encoded
  # Checks, detects if input string is base 64 encoded
  # @param request Input request
  # @param [Hash] opts the optional parameters
  # @return [Base64DetectResponse]
  describe 'edit_text_base64_detect test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_text_base64_encode
  # Base 64 encode, convert binary or file data to a text string
  # Encodes / converts binary or file data to a text string
  # @param request Input request
  # @param [Hash] opts the optional parameters
  # @return [Base64EncodeResponse]
  describe 'edit_text_base64_encode test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_text_change_line_endings
  # Set, change line endings of a text file
  # Sets the line ending type of a text file; set to Windows, Unix or Mac.
  # @param line_ending_type Required; &#39;Windows&#39; will use carriage return and line feed, &#39;Unix&#39; will use newline, and &#39;Mac&#39; will use carriage return
  # @param input_file Input file to perform the operation on.
  # @param [Hash] opts the optional parameters
  # @return [ChangeLineEndingResponse]
  describe 'edit_text_change_line_endings test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_text_detect_line_endings
  # Detect line endings of a text file
  # Detect line ending type (Windows, Unix or Mac) of an input file.
  # @param input_file Input file to perform the operation on.
  # @param [Hash] opts the optional parameters
  # @return [DetectLineEndingsResponse]
  describe 'edit_text_detect_line_endings test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_text_find_regex
  # Find a regular expression regex in text input
  # Find all occurrences of the input regular expression in the input content, and returns the matches
  # @param request Input request
  # @param [Hash] opts the optional parameters
  # @return [FindStringRegexResponse]
  describe 'edit_text_find_regex test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_text_find_simple
  # Find a string in text input
  # Finds all occurrences of the input string in the input content, and returns the matches
  # @param request Input request
  # @param [Hash] opts the optional parameters
  # @return [FindStringSimpleResponse]
  describe 'edit_text_find_simple test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_text_remove_all_whitespace
  # Remove whitespace from text string
  # Removes all whitespace from text, leaving behind only non-whitespace characters.  Whitespace includes newlines, spaces and other whitespace characters.
  # @param request Input request
  # @param [Hash] opts the optional parameters
  # @return [RemoveWhitespaceFromTextResponse]
  describe 'edit_text_remove_all_whitespace test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_text_remove_html
  # Remove HTML from text string
  # Removes HTML from text, leaving behind only text.  Formatted text will become plain text.  Important for protecting against HTML and Cross-Site-Scripting attacks.
  # @param request Input request
  # @param [Hash] opts the optional parameters
  # @return [RemoveHtmlFromTextResponse]
  describe 'edit_text_remove_html test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_text_replace_regex
  # Replace a string in text with a regex regular expression string
  # Replaces all occurrences of the input regular expression regex string in the input content, and returns the result
  # @param request Input request
  # @param [Hash] opts the optional parameters
  # @return [ReplaceStringRegexResponse]
  describe 'edit_text_replace_regex test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_text_replace_simple
  # Replace a string in text with another string value
  # Replaces all occurrences of the input string in the input content, and returns the result
  # @param request Input request
  # @param [Hash] opts the optional parameters
  # @return [ReplaceStringSimpleResponse]
  describe 'edit_text_replace_simple test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_text_text_encoding_detect
  # Detect text encoding of file
  # Checks text encoding of file
  # @param input_file Input file to perform the operation on.
  # @param [Hash] opts the optional parameters
  # @return [TextEncodingDetectResponse]
  describe 'edit_text_text_encoding_detect test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_text_trim_whitespace
  # Trim leading and trailing whitespace from text string
  # Trim leading and trailing whitespace from text, leaving behind a trimmed string.  Whitespace includes newlines, spaces and other whitespace characters.
  # @param request Input request
  # @param [Hash] opts the optional parameters
  # @return [RemoveWhitespaceFromTextResponse]
  describe 'edit_text_trim_whitespace test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
