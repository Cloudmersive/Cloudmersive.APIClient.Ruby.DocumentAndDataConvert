=begin
#convertapi

#Convert API lets you effortlessly convert file formats and types.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'spec_helper'
require 'json'

# Unit tests for CloudmersiveConvertApiClient::ValidateDocumentApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ValidateDocumentApi' do
  before do
    # run before each test
    @instance = CloudmersiveConvertApiClient::ValidateDocumentApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ValidateDocumentApi' do
    it 'should create an instance of ValidateDocumentApi' do
      expect(@instance).to be_instance_of(CloudmersiveConvertApiClient::ValidateDocumentApi)
    end
  end

  # unit tests for validate_document_autodetect_validation
  # Autodetect content type and validate
  # Automatically detect the type of content, verify and validate that the content is indeed fully valid at depth, and then report the validation result.
  # @param input_file Input file to perform the operation on.
  # @param [Hash] opts the optional parameters
  # @return [AutodetectDocumentValidationResult]
  describe 'validate_document_autodetect_validation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for validate_document_csv_validation
  # Validate a CSV file document (CSV)
  # Validate a CSV file document (CSV); if the document is not valid, identifies the errors in the document
  # @param input_file Input file to perform the operation on.
  # @param [Hash] opts the optional parameters
  # @return [DocumentValidationResult]
  describe 'validate_document_csv_validation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for validate_document_docx_validation
  # Validate a Word document (DOCX)
  # Validate a Word document (DOCX); if the document is not valid, identifies the errors in the document
  # @param input_file Input file to perform the operation on.
  # @param [Hash] opts the optional parameters
  # @return [DocumentValidationResult]
  describe 'validate_document_docx_validation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for validate_document_eml_validation
  # Validate if an EML file is executable
  # Validate if an input file is an EML email file; if the document is not valid
  # @param input_file Input file to perform the operation on.
  # @param [Hash] opts the optional parameters
  # @return [DocumentValidationResult]
  describe 'validate_document_eml_validation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for validate_document_executable_validation
  # Validate if a file is executable
  # Validate if an input file is a binary executable file; if the document is not valid
  # @param input_file Input file to perform the operation on.
  # @param [Hash] opts the optional parameters
  # @return [DocumentValidationResult]
  describe 'validate_document_executable_validation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for validate_document_g_zip_validation
  # Validate a GZip Archive file (gzip or gz)
  # Validate a GZip archive file (GZIP or GZ)
  # @param input_file Input file to perform the operation on.
  # @param [Hash] opts the optional parameters
  # @return [DocumentValidationResult]
  describe 'validate_document_g_zip_validation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for validate_document_html_validation
  # Validate an HTML file
  # Validate an HTML document file; if the document is not valid, identifies the errors in the document
  # @param input_file Input file to perform the operation on.
  # @param [Hash] opts the optional parameters
  # @return [DocumentValidationResult]
  describe 'validate_document_html_validation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for validate_document_image_validation
  # Validate an Image File
  # Validate an image file; if the document is not valid, identifies the errors in the document.  Formats supported include AAI, ART, ARW, AVS, BPG, BMP, BMP2, BMP3, BRF, CALS, CGM, CIN, CMYK, CMYKA, CR2, CRW, CUR, CUT, DCM, DCR, DCX, DDS, DIB, DJVU, DNG, DOT, DPX, EMF, EPDF, EPI, EPS, EPS2, EPS3, EPSF, EPSI, EPT, EXR, FAX, FIG, FITS, FPX, GIF, GPLT, GRAY, HDR, HEIC, HPGL, HRZ, ICO, ISOBRL, ISBRL6, JBIG, JNG, JP2, JPT, J2C, J2K, JPEG/JPG, JXR, MAT, MONO, MNG, M2V, MRW, MTV, NEF, ORF, OTB, P7, PALM, PAM, PBM, PCD, PCDS, PCL, PCX, PDF, PEF, PES, PFA, PFB, PFM, PGM, PICON, PICT, PIX, PNG, PNG8, PNG00, PNG24, PNG32, PNG48, PNG64, PNM, PPM, PSB, PSD, PTIF, PWB, RAD, RAF, RGB, RGBA, RGF, RLA, RLE, SCT, SFW, SGI, SID, SUN, SVG, TGA, TIFF, TIM, UIL, VIFF, VICAR, VBMP, WDP, WEBP, WPG, X, XBM, XCF, XPM, XWD, X3F, YCbCr, YCbCrA, YUV.
  # @param input_file Input file to perform the operation on.
  # @param [Hash] opts the optional parameters
  # @return [DocumentValidationResult]
  describe 'validate_document_image_validation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for validate_document_json_validation
  # Validate a JSON file
  # Validate a JSON (JavaScript Object Notation) document file; if the document is not valid, identifies the errors in the document
  # @param input_file Input file to perform the operation on.
  # @param [Hash] opts the optional parameters
  # @return [DocumentValidationResult]
  describe 'validate_document_json_validation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for validate_document_msg_validation
  # Validate if an MSG file is executable
  # Validate if an input file is an MSG email file; if the document is not valid
  # @param input_file Input file to perform the operation on.
  # @param [Hash] opts the optional parameters
  # @return [DocumentValidationResult]
  describe 'validate_document_msg_validation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for validate_document_pdf_validation
  # Validate a PDF document file
  # Validate a PDF document; if the document is not valid, identifies the errors in the document.  Also checks if the PDF is password protected.
  # @param input_file Input file to perform the operation on.
  # @param [Hash] opts the optional parameters
  # @return [DocumentValidationResult]
  describe 'validate_document_pdf_validation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for validate_document_pptx_validation
  # Validate a PowerPoint presentation (PPTX)
  # Validate a PowerPoint presentation (PPTX); if the document is not valid, identifies the errors in the document
  # @param input_file Input file to perform the operation on.
  # @param [Hash] opts the optional parameters
  # @return [DocumentValidationResult]
  describe 'validate_document_pptx_validation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for validate_document_rar_validation
  # Validate a RAR Archive file (RAR)
  # Validate a RAR archive file (RAR)
  # @param input_file Input file to perform the operation on.
  # @param [Hash] opts the optional parameters
  # @return [DocumentValidationResult]
  describe 'validate_document_rar_validation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for validate_document_tar_validation
  # Validate a TAR Tarball Archive file (TAR)
  # Validate a TAR tarball archive file (TAR)
  # @param input_file Input file to perform the operation on.
  # @param [Hash] opts the optional parameters
  # @return [DocumentValidationResult]
  describe 'validate_document_tar_validation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for validate_document_xlsx_validation
  # Validate a Excel document (XLSX)
  # Validate a Excel document (XLSX); if the document is not valid, identifies the errors in the document
  # @param input_file Input file to perform the operation on.
  # @param [Hash] opts the optional parameters
  # @return [DocumentValidationResult]
  describe 'validate_document_xlsx_validation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for validate_document_xml_validation
  # Validate an XML file
  # Validate an XML document file; if the document is not valid, identifies the errors in the document
  # @param input_file Input file to perform the operation on.
  # @param [Hash] opts the optional parameters
  # @return [DocumentValidationResult]
  describe 'validate_document_xml_validation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for validate_document_zip_validation
  # Validate a Zip Archive file (zip)
  # Validate a Zip archive file (ZIP)
  # @param input_file Input file to perform the operation on.
  # @param [Hash] opts the optional parameters
  # @return [DocumentValidationResult]
  describe 'validate_document_zip_validation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
