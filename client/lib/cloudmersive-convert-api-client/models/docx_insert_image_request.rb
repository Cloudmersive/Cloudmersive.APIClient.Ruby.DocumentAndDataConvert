=begin
#convertapi

#Convert API lets you effortlessly convert file formats and types.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module CloudmersiveConvertApiClient
  # Input to set-footer command
  class DocxInsertImageRequest
    # Optional: Bytes of the input file to operate on
    attr_accessor :input_document_file_bytes

    # Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).
    attr_accessor :input_document_file_url

    # Optional: Bytes of the input image file to operate on; if you supply this value do not supply InputImageFileUrl or ImageToAdd.
    attr_accessor :input_image_file_bytes

    # Optional: URL of an image file to operate on as input; if you supply this value do not supply InputImageFileBytes or ImageToAdd.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).
    attr_accessor :input_image_file_url

    # Optional: Image to add; if you supply in this object, do not supply InputImageFileBytes or InputImageFileUrl.
    attr_accessor :image_to_add

    # Optional; default is DocumentEnd.  Placement Type of the insert; possible values are: DocumentStart (very beginning of the document), DocumentEnd (very end of the document), BeforeExistingObject (right before an existing object - fill in the InsertPath field using the Path value from an existing object), AfterExistingObject (right after an existing object - fill in the InsertPath field using the Path value from an existing object)
    attr_accessor :insert_placement

    # Optional; location within the document to insert the object; fill in the InsertPath field using the Path value from an existing object.  Used with InsertPlacement of BeforeExistingObject or AfterExistingObject
    attr_accessor :insert_path

    # Optional: The width of the image in EMUs
    attr_accessor :width_in_em_us

    # Optional: The height of the image in EMUs
    attr_accessor :height_in_em_us


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'input_document_file_bytes' => :'InputDocumentFileBytes',
        :'input_document_file_url' => :'InputDocumentFileUrl',
        :'input_image_file_bytes' => :'InputImageFileBytes',
        :'input_image_file_url' => :'InputImageFileUrl',
        :'image_to_add' => :'ImageToAdd',
        :'insert_placement' => :'InsertPlacement',
        :'insert_path' => :'InsertPath',
        :'width_in_em_us' => :'WidthInEMUs',
        :'height_in_em_us' => :'HeightInEMUs'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'input_document_file_bytes' => :'String',
        :'input_document_file_url' => :'String',
        :'input_image_file_bytes' => :'String',
        :'input_image_file_url' => :'String',
        :'image_to_add' => :'DocxImage',
        :'insert_placement' => :'String',
        :'insert_path' => :'String',
        :'width_in_em_us' => :'Integer',
        :'height_in_em_us' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'InputDocumentFileBytes')
        self.input_document_file_bytes = attributes[:'InputDocumentFileBytes']
      end

      if attributes.has_key?(:'InputDocumentFileUrl')
        self.input_document_file_url = attributes[:'InputDocumentFileUrl']
      end

      if attributes.has_key?(:'InputImageFileBytes')
        self.input_image_file_bytes = attributes[:'InputImageFileBytes']
      end

      if attributes.has_key?(:'InputImageFileUrl')
        self.input_image_file_url = attributes[:'InputImageFileUrl']
      end

      if attributes.has_key?(:'ImageToAdd')
        self.image_to_add = attributes[:'ImageToAdd']
      end

      if attributes.has_key?(:'InsertPlacement')
        self.insert_placement = attributes[:'InsertPlacement']
      end

      if attributes.has_key?(:'InsertPath')
        self.insert_path = attributes[:'InsertPath']
      end

      if attributes.has_key?(:'WidthInEMUs')
        self.width_in_em_us = attributes[:'WidthInEMUs']
      end

      if attributes.has_key?(:'HeightInEMUs')
        self.height_in_em_us = attributes[:'HeightInEMUs']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@input_document_file_bytes.nil? && @input_document_file_bytes !~ Regexp.new(/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/)
        invalid_properties.push("invalid value for 'input_document_file_bytes', must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.")
      end

      if !@input_image_file_bytes.nil? && @input_image_file_bytes !~ Regexp.new(/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/)
        invalid_properties.push("invalid value for 'input_image_file_bytes', must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@input_document_file_bytes.nil? && @input_document_file_bytes !~ Regexp.new(/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/)
      return false if !@input_image_file_bytes.nil? && @input_image_file_bytes !~ Regexp.new(/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/)
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] input_document_file_bytes Value to be assigned
    def input_document_file_bytes=(input_document_file_bytes)

      if !input_document_file_bytes.nil? && input_document_file_bytes !~ Regexp.new(/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/)
        fail ArgumentError, "invalid value for 'input_document_file_bytes', must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/."
      end

      @input_document_file_bytes = input_document_file_bytes
    end

    # Custom attribute writer method with validation
    # @param [Object] input_image_file_bytes Value to be assigned
    def input_image_file_bytes=(input_image_file_bytes)

      if !input_image_file_bytes.nil? && input_image_file_bytes !~ Regexp.new(/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/)
        fail ArgumentError, "invalid value for 'input_image_file_bytes', must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/."
      end

      @input_image_file_bytes = input_image_file_bytes
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          input_document_file_bytes == o.input_document_file_bytes &&
          input_document_file_url == o.input_document_file_url &&
          input_image_file_bytes == o.input_image_file_bytes &&
          input_image_file_url == o.input_image_file_url &&
          image_to_add == o.image_to_add &&
          insert_placement == o.insert_placement &&
          insert_path == o.insert_path &&
          width_in_em_us == o.width_in_em_us &&
          height_in_em_us == o.height_in_em_us
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [input_document_file_bytes, input_document_file_url, input_image_file_bytes, input_image_file_url, image_to_add, insert_placement, insert_path, width_in_em_us, height_in_em_us].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CloudmersiveConvertApiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
