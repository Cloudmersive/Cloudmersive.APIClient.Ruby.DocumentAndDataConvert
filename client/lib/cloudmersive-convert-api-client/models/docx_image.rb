=begin
#convertapi

#Convert API lets you effortlessly convert file formats and types.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: unset

=end

require 'date'

module CloudmersiveConvertApiClient

  class DocxImage
    # The Path of the location of this object; leave blank for new tables
    attr_accessor :path

    # The Name of the image
    attr_accessor :image_name

    # The Id of the image
    attr_accessor :image_id

    # The Description of the image
    attr_accessor :image_description

    # Width of the image in EMUs (English Metric Units); set to 0 to default to page width and aspect-ratio based height
    attr_accessor :image_width

    # Height of the image in EMUs (English Metric Units); set to 0 to default to page width and aspect-ratio based height
    attr_accessor :image_height

    # X (horizontal) offset of the image
    attr_accessor :x_offset

    # Y (vertical) offset of the image
    attr_accessor :y_offset

    # Read-only; internal ID for the image contents
    attr_accessor :image_data_embed_id

    # Read-only; image data MIME content-type
    attr_accessor :image_data_content_type

    # Read-only; internal file name/path for the image
    attr_accessor :image_internal_file_name

    # URL to the image contents; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the contents.
    attr_accessor :image_contents_url

    # True if the image is inline with the text; false if it is floating
    attr_accessor :inline_with_text


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'path' => :'Path',
        :'image_name' => :'ImageName',
        :'image_id' => :'ImageId',
        :'image_description' => :'ImageDescription',
        :'image_width' => :'ImageWidth',
        :'image_height' => :'ImageHeight',
        :'x_offset' => :'XOffset',
        :'y_offset' => :'YOffset',
        :'image_data_embed_id' => :'ImageDataEmbedId',
        :'image_data_content_type' => :'ImageDataContentType',
        :'image_internal_file_name' => :'ImageInternalFileName',
        :'image_contents_url' => :'ImageContentsURL',
        :'inline_with_text' => :'InlineWithText'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'path' => :'String',
        :'image_name' => :'String',
        :'image_id' => :'Integer',
        :'image_description' => :'String',
        :'image_width' => :'Integer',
        :'image_height' => :'Integer',
        :'x_offset' => :'Integer',
        :'y_offset' => :'Integer',
        :'image_data_embed_id' => :'String',
        :'image_data_content_type' => :'String',
        :'image_internal_file_name' => :'String',
        :'image_contents_url' => :'String',
        :'inline_with_text' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'Path')
        self.path = attributes[:'Path']
      end

      if attributes.has_key?(:'ImageName')
        self.image_name = attributes[:'ImageName']
      end

      if attributes.has_key?(:'ImageId')
        self.image_id = attributes[:'ImageId']
      end

      if attributes.has_key?(:'ImageDescription')
        self.image_description = attributes[:'ImageDescription']
      end

      if attributes.has_key?(:'ImageWidth')
        self.image_width = attributes[:'ImageWidth']
      end

      if attributes.has_key?(:'ImageHeight')
        self.image_height = attributes[:'ImageHeight']
      end

      if attributes.has_key?(:'XOffset')
        self.x_offset = attributes[:'XOffset']
      end

      if attributes.has_key?(:'YOffset')
        self.y_offset = attributes[:'YOffset']
      end

      if attributes.has_key?(:'ImageDataEmbedId')
        self.image_data_embed_id = attributes[:'ImageDataEmbedId']
      end

      if attributes.has_key?(:'ImageDataContentType')
        self.image_data_content_type = attributes[:'ImageDataContentType']
      end

      if attributes.has_key?(:'ImageInternalFileName')
        self.image_internal_file_name = attributes[:'ImageInternalFileName']
      end

      if attributes.has_key?(:'ImageContentsURL')
        self.image_contents_url = attributes[:'ImageContentsURL']
      end

      if attributes.has_key?(:'InlineWithText')
        self.inline_with_text = attributes[:'InlineWithText']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          path == o.path &&
          image_name == o.image_name &&
          image_id == o.image_id &&
          image_description == o.image_description &&
          image_width == o.image_width &&
          image_height == o.image_height &&
          x_offset == o.x_offset &&
          y_offset == o.y_offset &&
          image_data_embed_id == o.image_data_embed_id &&
          image_data_content_type == o.image_data_content_type &&
          image_internal_file_name == o.image_internal_file_name &&
          image_contents_url == o.image_contents_url &&
          inline_with_text == o.inline_with_text
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [path, image_name, image_id, image_description, image_width, image_height, x_offset, y_offset, image_data_embed_id, image_data_content_type, image_internal_file_name, image_contents_url, inline_with_text].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CloudmersiveConvertApiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
