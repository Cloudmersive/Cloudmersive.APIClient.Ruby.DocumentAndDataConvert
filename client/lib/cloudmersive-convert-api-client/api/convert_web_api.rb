=begin
#convertapi

#Convert API lets you effortlessly convert file formats and types.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: unset

=end

require "uri"

module CloudmersiveConvertApiClient
  class ConvertWebApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # HTML to DOCX
    # Convert HTML to Office Word Document (DOCX) format
    # @param input_request 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def convert_web_html_to_docx(input_request, opts = {})
      data, _status_code, _headers = convert_web_html_to_docx_with_http_info(input_request, opts)
      return data
    end

    # HTML to DOCX
    # Convert HTML to Office Word Document (DOCX) format
    # @param input_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def convert_web_html_to_docx_with_http_info(input_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConvertWebApi.convert_web_html_to_docx ..."
      end
      # verify the required parameter 'input_request' is set
      if @api_client.config.client_side_validation && input_request.nil?
        fail ArgumentError, "Missing the required parameter 'input_request' when calling ConvertWebApi.convert_web_html_to_docx"
      end
      # resource path
      local_var_path = "/convert/html/to/docx"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(input_request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConvertWebApi#convert_web_html_to_docx\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Convert HTML string to PDF
    # Fully renders a website and returns a PDF of the HTML.  Javascript, HTML5, CSS and other advanced features are all supported.
    # @param input HTML to PDF request parameters
    # @param [Hash] opts the optional parameters
    # @return [String]
    def convert_web_html_to_pdf(input, opts = {})
      data, _status_code, _headers = convert_web_html_to_pdf_with_http_info(input, opts)
      return data
    end

    # Convert HTML string to PDF
    # Fully renders a website and returns a PDF of the HTML.  Javascript, HTML5, CSS and other advanced features are all supported.
    # @param input HTML to PDF request parameters
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def convert_web_html_to_pdf_with_http_info(input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConvertWebApi.convert_web_html_to_pdf ..."
      end
      # verify the required parameter 'input' is set
      if @api_client.config.client_side_validation && input.nil?
        fail ArgumentError, "Missing the required parameter 'input' when calling ConvertWebApi.convert_web_html_to_pdf"
      end
      # resource path
      local_var_path = "/convert/web/html/to/pdf"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(input)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConvertWebApi#convert_web_html_to_pdf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Convert Markdown to HTML
    # Convert a markdown file (.md) to HTML
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [HtmlMdResult]
    def convert_web_md_to_html(input_file, opts = {})
      data, _status_code, _headers = convert_web_md_to_html_with_http_info(input_file, opts)
      return data
    end

    # Convert Markdown to HTML
    # Convert a markdown file (.md) to HTML
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(HtmlMdResult, Fixnum, Hash)>] HtmlMdResult data, response status code and response headers
    def convert_web_md_to_html_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConvertWebApi.convert_web_md_to_html ..."
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ConvertWebApi.convert_web_md_to_html"
      end
      # resource path
      local_var_path = "/convert/web/md/to/html"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["inputFile"] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HtmlMdResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConvertWebApi#convert_web_md_to_html\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Convert a URL to PDF
    # Fully renders a website and returns a PDF of the full page.  Javascript, HTML5, CSS and other advanced features are all supported.
    # @param input URL to PDF request parameters
    # @param [Hash] opts the optional parameters
    # @return [String]
    def convert_web_url_to_pdf(input, opts = {})
      data, _status_code, _headers = convert_web_url_to_pdf_with_http_info(input, opts)
      return data
    end

    # Convert a URL to PDF
    # Fully renders a website and returns a PDF of the full page.  Javascript, HTML5, CSS and other advanced features are all supported.
    # @param input URL to PDF request parameters
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def convert_web_url_to_pdf_with_http_info(input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConvertWebApi.convert_web_url_to_pdf ..."
      end
      # verify the required parameter 'input' is set
      if @api_client.config.client_side_validation && input.nil?
        fail ArgumentError, "Missing the required parameter 'input' when calling ConvertWebApi.convert_web_url_to_pdf"
      end
      # resource path
      local_var_path = "/convert/web/url/to/pdf"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(input)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConvertWebApi#convert_web_url_to_pdf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Take screenshot of URL
    # Fully renders a website and returns a PNG screenshot of the full page image.  Javascript, HTML5, CSS and other advanced features are all supported.
    # @param input Screenshot request parameters
    # @param [Hash] opts the optional parameters
    # @return [String]
    def convert_web_url_to_screenshot(input, opts = {})
      data, _status_code, _headers = convert_web_url_to_screenshot_with_http_info(input, opts)
      return data
    end

    # Take screenshot of URL
    # Fully renders a website and returns a PNG screenshot of the full page image.  Javascript, HTML5, CSS and other advanced features are all supported.
    # @param input Screenshot request parameters
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def convert_web_url_to_screenshot_with_http_info(input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConvertWebApi.convert_web_url_to_screenshot ..."
      end
      # verify the required parameter 'input' is set
      if @api_client.config.client_side_validation && input.nil?
        fail ArgumentError, "Missing the required parameter 'input' when calling ConvertWebApi.convert_web_url_to_screenshot"
      end
      # resource path
      local_var_path = "/convert/web/url/to/screenshot"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(input)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConvertWebApi#convert_web_url_to_screenshot\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
