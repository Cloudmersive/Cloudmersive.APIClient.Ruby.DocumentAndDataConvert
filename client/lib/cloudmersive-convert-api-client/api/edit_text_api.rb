=begin
#convertapi

#Convert API lets you effortlessly convert file formats and types.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module CloudmersiveConvertApiClient
  class EditTextApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Base 64 decode, convert base 64 string to binary content
    # Decodes / converts base 64 UTF-8 text string to binary content
    # @param request Input request
    # @param [Hash] opts the optional parameters
    # @return [Base64DecodeResponse]
    def edit_text_base64_decode(request, opts = {})
      data, _status_code, _headers = edit_text_base64_decode_with_http_info(request, opts)
      return data
    end

    # Base 64 decode, convert base 64 string to binary content
    # Decodes / converts base 64 UTF-8 text string to binary content
    # @param request Input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(Base64DecodeResponse, Fixnum, Hash)>] Base64DecodeResponse data, response status code and response headers
    def edit_text_base64_decode_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditTextApi.edit_text_base64_decode ..."
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling EditTextApi.edit_text_base64_decode"
      end
      # resource path
      local_var_path = "/convert/edit/text/encoding/base64/decode"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Base64DecodeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditTextApi#edit_text_base64_decode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detect, check if text string is base 64 encoded
    # Checks, detects if input string is base 64 encoded
    # @param request Input request
    # @param [Hash] opts the optional parameters
    # @return [Base64DetectResponse]
    def edit_text_base64_detect(request, opts = {})
      data, _status_code, _headers = edit_text_base64_detect_with_http_info(request, opts)
      return data
    end

    # Detect, check if text string is base 64 encoded
    # Checks, detects if input string is base 64 encoded
    # @param request Input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(Base64DetectResponse, Fixnum, Hash)>] Base64DetectResponse data, response status code and response headers
    def edit_text_base64_detect_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditTextApi.edit_text_base64_detect ..."
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling EditTextApi.edit_text_base64_detect"
      end
      # resource path
      local_var_path = "/convert/edit/text/encoding/base64/detect"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Base64DetectResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditTextApi#edit_text_base64_detect\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Base 64 encode, convert binary or file data to a text string
    # Encodes / converts binary or file data to a text string
    # @param request Input request
    # @param [Hash] opts the optional parameters
    # @return [Base64EncodeResponse]
    def edit_text_base64_encode(request, opts = {})
      data, _status_code, _headers = edit_text_base64_encode_with_http_info(request, opts)
      return data
    end

    # Base 64 encode, convert binary or file data to a text string
    # Encodes / converts binary or file data to a text string
    # @param request Input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(Base64EncodeResponse, Fixnum, Hash)>] Base64EncodeResponse data, response status code and response headers
    def edit_text_base64_encode_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditTextApi.edit_text_base64_encode ..."
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling EditTextApi.edit_text_base64_encode"
      end
      # resource path
      local_var_path = "/convert/edit/text/encoding/base64/encode"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Base64EncodeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditTextApi#edit_text_base64_encode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set, change line endings of a text file
    # Sets the line ending type of a text file; set to Windows, Unix or Mac.
    # @param line_ending_type Required; &#39;Windows&#39; will use carriage return and line feed, &#39;Unix&#39; will use newline, and &#39;Mac&#39; will use carriage return
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [ChangeLineEndingResponse]
    def edit_text_change_line_endings(line_ending_type, input_file, opts = {})
      data, _status_code, _headers = edit_text_change_line_endings_with_http_info(line_ending_type, input_file, opts)
      return data
    end

    # Set, change line endings of a text file
    # Sets the line ending type of a text file; set to Windows, Unix or Mac.
    # @param line_ending_type Required; &#39;Windows&#39; will use carriage return and line feed, &#39;Unix&#39; will use newline, and &#39;Mac&#39; will use carriage return
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChangeLineEndingResponse, Fixnum, Hash)>] ChangeLineEndingResponse data, response status code and response headers
    def edit_text_change_line_endings_with_http_info(line_ending_type, input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditTextApi.edit_text_change_line_endings ..."
      end
      # verify the required parameter 'line_ending_type' is set
      if @api_client.config.client_side_validation && line_ending_type.nil?
        fail ArgumentError, "Missing the required parameter 'line_ending_type' when calling EditTextApi.edit_text_change_line_endings"
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling EditTextApi.edit_text_change_line_endings"
      end
      # resource path
      local_var_path = "/convert/edit/text/line-endings/change"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])
      header_params[:'lineEndingType'] = line_ending_type

      # form parameters
      form_params = {}
      form_params["inputFile"] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChangeLineEndingResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditTextApi#edit_text_change_line_endings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detect line endings of a text file
    # Detect line ending type (Windows, Unix or Mac) of an input file.
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [DetectLineEndingsResponse]
    def edit_text_detect_line_endings(input_file, opts = {})
      data, _status_code, _headers = edit_text_detect_line_endings_with_http_info(input_file, opts)
      return data
    end

    # Detect line endings of a text file
    # Detect line ending type (Windows, Unix or Mac) of an input file.
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DetectLineEndingsResponse, Fixnum, Hash)>] DetectLineEndingsResponse data, response status code and response headers
    def edit_text_detect_line_endings_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditTextApi.edit_text_detect_line_endings ..."
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling EditTextApi.edit_text_detect_line_endings"
      end
      # resource path
      local_var_path = "/convert/edit/text/line-endings/detect"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["inputFile"] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DetectLineEndingsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditTextApi#edit_text_detect_line_endings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find a regular expression regex in text input
    # Find all occurrences of the input regular expression in the input content, and returns the matches
    # @param request Input request
    # @param [Hash] opts the optional parameters
    # @return [FindStringRegexResponse]
    def edit_text_find_regex(request, opts = {})
      data, _status_code, _headers = edit_text_find_regex_with_http_info(request, opts)
      return data
    end

    # Find a regular expression regex in text input
    # Find all occurrences of the input regular expression in the input content, and returns the matches
    # @param request Input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(FindStringRegexResponse, Fixnum, Hash)>] FindStringRegexResponse data, response status code and response headers
    def edit_text_find_regex_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditTextApi.edit_text_find_regex ..."
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling EditTextApi.edit_text_find_regex"
      end
      # resource path
      local_var_path = "/convert/edit/text/find/regex"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FindStringRegexResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditTextApi#edit_text_find_regex\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find a string in text input
    # Finds all occurrences of the input string in the input content, and returns the matches
    # @param request Input request
    # @param [Hash] opts the optional parameters
    # @return [FindStringSimpleResponse]
    def edit_text_find_simple(request, opts = {})
      data, _status_code, _headers = edit_text_find_simple_with_http_info(request, opts)
      return data
    end

    # Find a string in text input
    # Finds all occurrences of the input string in the input content, and returns the matches
    # @param request Input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(FindStringSimpleResponse, Fixnum, Hash)>] FindStringSimpleResponse data, response status code and response headers
    def edit_text_find_simple_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditTextApi.edit_text_find_simple ..."
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling EditTextApi.edit_text_find_simple"
      end
      # resource path
      local_var_path = "/convert/edit/text/find/string"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FindStringSimpleResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditTextApi#edit_text_find_simple\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove whitespace from text string
    # Removes all whitespace from text, leaving behind only non-whitespace characters.  Whitespace includes newlines, spaces and other whitespace characters.
    # @param request Input request
    # @param [Hash] opts the optional parameters
    # @return [RemoveWhitespaceFromTextResponse]
    def edit_text_remove_all_whitespace(request, opts = {})
      data, _status_code, _headers = edit_text_remove_all_whitespace_with_http_info(request, opts)
      return data
    end

    # Remove whitespace from text string
    # Removes all whitespace from text, leaving behind only non-whitespace characters.  Whitespace includes newlines, spaces and other whitespace characters.
    # @param request Input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(RemoveWhitespaceFromTextResponse, Fixnum, Hash)>] RemoveWhitespaceFromTextResponse data, response status code and response headers
    def edit_text_remove_all_whitespace_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditTextApi.edit_text_remove_all_whitespace ..."
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling EditTextApi.edit_text_remove_all_whitespace"
      end
      # resource path
      local_var_path = "/convert/edit/text/remove/whitespace/all"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RemoveWhitespaceFromTextResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditTextApi#edit_text_remove_all_whitespace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove HTML from text string
    # Removes HTML from text, leaving behind only text.  Formatted text will become plain text.  Important for protecting against HTML and Cross-Site-Scripting attacks.
    # @param request Input request
    # @param [Hash] opts the optional parameters
    # @return [RemoveHtmlFromTextResponse]
    def edit_text_remove_html(request, opts = {})
      data, _status_code, _headers = edit_text_remove_html_with_http_info(request, opts)
      return data
    end

    # Remove HTML from text string
    # Removes HTML from text, leaving behind only text.  Formatted text will become plain text.  Important for protecting against HTML and Cross-Site-Scripting attacks.
    # @param request Input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(RemoveHtmlFromTextResponse, Fixnum, Hash)>] RemoveHtmlFromTextResponse data, response status code and response headers
    def edit_text_remove_html_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditTextApi.edit_text_remove_html ..."
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling EditTextApi.edit_text_remove_html"
      end
      # resource path
      local_var_path = "/convert/edit/text/remove/html"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RemoveHtmlFromTextResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditTextApi#edit_text_remove_html\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace a string in text with a regex regular expression string
    # Replaces all occurrences of the input regular expression regex string in the input content, and returns the result
    # @param request Input request
    # @param [Hash] opts the optional parameters
    # @return [ReplaceStringRegexResponse]
    def edit_text_replace_regex(request, opts = {})
      data, _status_code, _headers = edit_text_replace_regex_with_http_info(request, opts)
      return data
    end

    # Replace a string in text with a regex regular expression string
    # Replaces all occurrences of the input regular expression regex string in the input content, and returns the result
    # @param request Input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReplaceStringRegexResponse, Fixnum, Hash)>] ReplaceStringRegexResponse data, response status code and response headers
    def edit_text_replace_regex_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditTextApi.edit_text_replace_regex ..."
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling EditTextApi.edit_text_replace_regex"
      end
      # resource path
      local_var_path = "/convert/edit/text/replace/regex"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReplaceStringRegexResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditTextApi#edit_text_replace_regex\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace a string in text with another string value
    # Replaces all occurrences of the input string in the input content, and returns the result
    # @param request Input request
    # @param [Hash] opts the optional parameters
    # @return [ReplaceStringSimpleResponse]
    def edit_text_replace_simple(request, opts = {})
      data, _status_code, _headers = edit_text_replace_simple_with_http_info(request, opts)
      return data
    end

    # Replace a string in text with another string value
    # Replaces all occurrences of the input string in the input content, and returns the result
    # @param request Input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReplaceStringSimpleResponse, Fixnum, Hash)>] ReplaceStringSimpleResponse data, response status code and response headers
    def edit_text_replace_simple_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditTextApi.edit_text_replace_simple ..."
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling EditTextApi.edit_text_replace_simple"
      end
      # resource path
      local_var_path = "/convert/edit/text/replace/string"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReplaceStringSimpleResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditTextApi#edit_text_replace_simple\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detect text encoding of file
    # Checks text encoding of file
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [TextEncodingDetectResponse]
    def edit_text_text_encoding_detect(input_file, opts = {})
      data, _status_code, _headers = edit_text_text_encoding_detect_with_http_info(input_file, opts)
      return data
    end

    # Detect text encoding of file
    # Checks text encoding of file
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TextEncodingDetectResponse, Fixnum, Hash)>] TextEncodingDetectResponse data, response status code and response headers
    def edit_text_text_encoding_detect_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditTextApi.edit_text_text_encoding_detect ..."
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling EditTextApi.edit_text_text_encoding_detect"
      end
      # resource path
      local_var_path = "/convert/edit/text/encoding/detect"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["inputFile"] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TextEncodingDetectResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditTextApi#edit_text_text_encoding_detect\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Trim leading and trailing whitespace from text string
    # Trim leading and trailing whitespace from text, leaving behind a trimmed string.  Whitespace includes newlines, spaces and other whitespace characters.
    # @param request Input request
    # @param [Hash] opts the optional parameters
    # @return [RemoveWhitespaceFromTextResponse]
    def edit_text_trim_whitespace(request, opts = {})
      data, _status_code, _headers = edit_text_trim_whitespace_with_http_info(request, opts)
      return data
    end

    # Trim leading and trailing whitespace from text string
    # Trim leading and trailing whitespace from text, leaving behind a trimmed string.  Whitespace includes newlines, spaces and other whitespace characters.
    # @param request Input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(RemoveWhitespaceFromTextResponse, Fixnum, Hash)>] RemoveWhitespaceFromTextResponse data, response status code and response headers
    def edit_text_trim_whitespace_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditTextApi.edit_text_trim_whitespace ..."
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling EditTextApi.edit_text_trim_whitespace"
      end
      # resource path
      local_var_path = "/convert/edit/text/remove/whitespace/trim"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RemoveWhitespaceFromTextResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditTextApi#edit_text_trim_whitespace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
