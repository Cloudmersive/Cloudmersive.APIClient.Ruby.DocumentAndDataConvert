=begin
#convertapi

#Convert API lets you effortlessly convert file formats and types.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module CloudmersiveConvertApiClient
  class EditDocumentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Begin editing a document
    # Uploads a document to Cloudmersive to begin a series of one or more editing operations.  To edit a document, first call Begin Editing on the document.  Then perform operations on the document using the secure URL returned from BeginEditing, such as Word DOCX Delete Pages and Insert Table.  Finally, perform finish editing on the URL to return the resulting edited document.  The editing URL is temporary and only stored in-memory cache, and will automatically expire from the cache after 30 minutes, and cannot be directly accessed.
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def edit_document_begin_editing(input_file, opts = {})
      data, _status_code, _headers = edit_document_begin_editing_with_http_info(input_file, opts)
      return data
    end

    # Begin editing a document
    # Uploads a document to Cloudmersive to begin a series of one or more editing operations.  To edit a document, first call Begin Editing on the document.  Then perform operations on the document using the secure URL returned from BeginEditing, such as Word DOCX Delete Pages and Insert Table.  Finally, perform finish editing on the URL to return the resulting edited document.  The editing URL is temporary and only stored in-memory cache, and will automatically expire from the cache after 30 minutes, and cannot be directly accessed.
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def edit_document_begin_editing_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_begin_editing ..."
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling EditDocumentApi.edit_document_begin_editing"
      end
      # resource path
      local_var_path = "/convert/edit/begin-editing"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["inputFile"] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_begin_editing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get body from a Word DOCX document
    # Returns the body defined in the Word Document (DOCX) format file; this is the main content part of a DOCX document
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [GetDocxBodyResponse]
    def edit_document_docx_body(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_body_with_http_info(req_config, opts)
      return data
    end

    # Get body from a Word DOCX document
    # Returns the body defined in the Word Document (DOCX) format file; this is the main content part of a DOCX document
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetDocxBodyResponse, Fixnum, Hash)>] GetDocxBodyResponse data, response status code and response headers
    def edit_document_docx_body_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_body ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_body"
      end
      # resource path
      local_var_path = "/convert/edit/docx/get-body"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetDocxBodyResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_body\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a blank Word DOCX document
    # Returns a blank Word DOCX Document format file.  The file is blank, with no contents.  Use additional editing commands such as Insert Paragraph or Insert Table or Insert Image to populate the document.
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [CreateBlankDocxResponse]
    def edit_document_docx_create_blank_document(input, opts = {})
      data, _status_code, _headers = edit_document_docx_create_blank_document_with_http_info(input, opts)
      return data
    end

    # Create a blank Word DOCX document
    # Returns a blank Word DOCX Document format file.  The file is blank, with no contents.  Use additional editing commands such as Insert Paragraph or Insert Table or Insert Image to populate the document.
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateBlankDocxResponse, Fixnum, Hash)>] CreateBlankDocxResponse data, response status code and response headers
    def edit_document_docx_create_blank_document_with_http_info(input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_create_blank_document ..."
      end
      # verify the required parameter 'input' is set
      if @api_client.config.client_side_validation && input.nil?
        fail ArgumentError, "Missing the required parameter 'input' when calling EditDocumentApi.edit_document_docx_create_blank_document"
      end
      # resource path
      local_var_path = "/convert/edit/docx/create/blank"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(input)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateBlankDocxResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_create_blank_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete, remove pages from a Word DOCX document
    # Returns the edited Word Document in the Word Document (DOCX) format file with the specified pages removed
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [String]
    def edit_document_docx_delete_pages(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_delete_pages_with_http_info(req_config, opts)
      return data
    end

    # Delete, remove pages from a Word DOCX document
    # Returns the edited Word Document in the Word Document (DOCX) format file with the specified pages removed
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def edit_document_docx_delete_pages_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_delete_pages ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_delete_pages"
      end
      # resource path
      local_var_path = "/convert/edit/docx/delete-pages"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_delete_pages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a table row in an existing table in a Word DOCX document
    # Deletes an existing table row in a Word DOCX Document and returns the result.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [DeleteDocxTableRowResponse]
    def edit_document_docx_delete_table_row(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_delete_table_row_with_http_info(req_config, opts)
      return data
    end

    # Deletes a table row in an existing table in a Word DOCX document
    # Deletes an existing table row in a Word DOCX Document and returns the result.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteDocxTableRowResponse, Fixnum, Hash)>] DeleteDocxTableRowResponse data, response status code and response headers
    def edit_document_docx_delete_table_row_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_delete_table_row ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_delete_table_row"
      end
      # resource path
      local_var_path = "/convert/edit/docx/delete-table-row"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeleteDocxTableRowResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_delete_table_row\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a range of multiple table rows in an existing table in a Word DOCX document
    # Deletes a range of 1 or more existing table rows in a Word DOCX Document and returns the result.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [DeleteDocxTableRowRangeResponse]
    def edit_document_docx_delete_table_row_range(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_delete_table_row_range_with_http_info(req_config, opts)
      return data
    end

    # Deletes a range of multiple table rows in an existing table in a Word DOCX document
    # Deletes a range of 1 or more existing table rows in a Word DOCX Document and returns the result.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteDocxTableRowRangeResponse, Fixnum, Hash)>] DeleteDocxTableRowRangeResponse data, response status code and response headers
    def edit_document_docx_delete_table_row_range_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_delete_table_row_range ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_delete_table_row_range"
      end
      # resource path
      local_var_path = "/convert/edit/docx/delete-table-row/range"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeleteDocxTableRowRangeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_delete_table_row_range\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get comments from a Word DOCX document as a flat list
    # Returns the comments and review annotations stored in the Word Document (DOCX) format file as a flattened list (not as a hierarchy of comments and replies).
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [GetDocxCommentsResponse]
    def edit_document_docx_get_comments(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_get_comments_with_http_info(req_config, opts)
      return data
    end

    # Get comments from a Word DOCX document as a flat list
    # Returns the comments and review annotations stored in the Word Document (DOCX) format file as a flattened list (not as a hierarchy of comments and replies).
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetDocxCommentsResponse, Fixnum, Hash)>] GetDocxCommentsResponse data, response status code and response headers
    def edit_document_docx_get_comments_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_get_comments ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_get_comments"
      end
      # resource path
      local_var_path = "/convert/edit/docx/get-comments/flat-list"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetDocxCommentsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_get_comments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get comments from a Word DOCX document hierarchically
    # Returns the comments and review annotations stored in the Word Document (DOCX) format file hierarchically, where reply comments are nested as children under top-level comments in the results returned.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [GetDocxCommentsHierarchicalResponse]
    def edit_document_docx_get_comments_hierarchical(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_get_comments_hierarchical_with_http_info(req_config, opts)
      return data
    end

    # Get comments from a Word DOCX document hierarchically
    # Returns the comments and review annotations stored in the Word Document (DOCX) format file hierarchically, where reply comments are nested as children under top-level comments in the results returned.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetDocxCommentsHierarchicalResponse, Fixnum, Hash)>] GetDocxCommentsHierarchicalResponse data, response status code and response headers
    def edit_document_docx_get_comments_hierarchical_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_get_comments_hierarchical ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_get_comments_hierarchical"
      end
      # resource path
      local_var_path = "/convert/edit/docx/get-comments/hierarchical"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetDocxCommentsHierarchicalResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_get_comments_hierarchical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get content of a footer from a Word DOCX document
    # Returns the footer content from a Word Document (DOCX) format file
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [GetDocxHeadersAndFootersResponse]
    def edit_document_docx_get_headers_and_footers(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_get_headers_and_footers_with_http_info(req_config, opts)
      return data
    end

    # Get content of a footer from a Word DOCX document
    # Returns the footer content from a Word Document (DOCX) format file
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetDocxHeadersAndFootersResponse, Fixnum, Hash)>] GetDocxHeadersAndFootersResponse data, response status code and response headers
    def edit_document_docx_get_headers_and_footers_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_get_headers_and_footers ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_get_headers_and_footers"
      end
      # resource path
      local_var_path = "/convert/edit/docx/get-headers-and-footers"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetDocxHeadersAndFootersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_get_headers_and_footers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get images from a Word DOCX document
    # Returns the images defined in the Word Document (DOCX) format file
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [GetDocxImagesResponse]
    def edit_document_docx_get_images(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_get_images_with_http_info(req_config, opts)
      return data
    end

    # Get images from a Word DOCX document
    # Returns the images defined in the Word Document (DOCX) format file
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetDocxImagesResponse, Fixnum, Hash)>] GetDocxImagesResponse data, response status code and response headers
    def edit_document_docx_get_images_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_get_images ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_get_images"
      end
      # resource path
      local_var_path = "/convert/edit/docx/get-images"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetDocxImagesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_get_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get sections from a Word DOCX document
    # Returns the sections defined in the Word Document (DOCX) format file
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [GetDocxSectionsResponse]
    def edit_document_docx_get_sections(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_get_sections_with_http_info(req_config, opts)
      return data
    end

    # Get sections from a Word DOCX document
    # Returns the sections defined in the Word Document (DOCX) format file
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetDocxSectionsResponse, Fixnum, Hash)>] GetDocxSectionsResponse data, response status code and response headers
    def edit_document_docx_get_sections_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_get_sections ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_get_sections"
      end
      # resource path
      local_var_path = "/convert/edit/docx/get-sections"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetDocxSectionsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_get_sections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get styles from a Word DOCX document
    # Returns the styles defined in the Word Document (DOCX) format file
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [GetDocxStylesResponse]
    def edit_document_docx_get_styles(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_get_styles_with_http_info(req_config, opts)
      return data
    end

    # Get styles from a Word DOCX document
    # Returns the styles defined in the Word Document (DOCX) format file
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetDocxStylesResponse, Fixnum, Hash)>] GetDocxStylesResponse data, response status code and response headers
    def edit_document_docx_get_styles_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_get_styles ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_get_styles"
      end
      # resource path
      local_var_path = "/convert/edit/docx/get-styles"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetDocxStylesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_get_styles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a specific table by index in a Word DOCX document
    # Returns the specific table object by its 0-based index in an Office Word Document (DOCX)
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [GetDocxTableByIndexResponse]
    def edit_document_docx_get_table_by_index(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_get_table_by_index_with_http_info(req_config, opts)
      return data
    end

    # Get a specific table by index in a Word DOCX document
    # Returns the specific table object by its 0-based index in an Office Word Document (DOCX)
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetDocxTableByIndexResponse, Fixnum, Hash)>] GetDocxTableByIndexResponse data, response status code and response headers
    def edit_document_docx_get_table_by_index_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_get_table_by_index ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_get_table_by_index"
      end
      # resource path
      local_var_path = "/convert/edit/docx/get-table/by-index"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetDocxTableByIndexResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_get_table_by_index\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the contents of an existing table row in an existing table in a Word DOCX document
    # Gets the contents of an existing table row in a Word DOCX Document and returns the result.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [GetDocxTableRowResponse]
    def edit_document_docx_get_table_row(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_get_table_row_with_http_info(req_config, opts)
      return data
    end

    # Gets the contents of an existing table row in an existing table in a Word DOCX document
    # Gets the contents of an existing table row in a Word DOCX Document and returns the result.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetDocxTableRowResponse, Fixnum, Hash)>] GetDocxTableRowResponse data, response status code and response headers
    def edit_document_docx_get_table_row_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_get_table_row ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_get_table_row"
      end
      # resource path
      local_var_path = "/convert/edit/docx/get-table-row"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetDocxTableRowResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_get_table_row\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all tables in Word DOCX document
    # Returns all the table objects in an Office Word Document (docx)
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [GetDocxTablesResponse]
    def edit_document_docx_get_tables(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_get_tables_with_http_info(req_config, opts)
      return data
    end

    # Get all tables in Word DOCX document
    # Returns all the table objects in an Office Word Document (docx)
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetDocxTablesResponse, Fixnum, Hash)>] GetDocxTablesResponse data, response status code and response headers
    def edit_document_docx_get_tables_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_get_tables ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_get_tables"
      end
      # resource path
      local_var_path = "/convert/edit/docx/get-tables"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetDocxTablesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_get_tables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert a new comment into a Word DOCX document attached to a paragraph
    # Adds a new comment into a Word DOCX document attached to a paragraph and returns the result.  Call Finish Editing on the output URL to complete the operation.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [InsertDocxCommentOnParagraphResponse]
    def edit_document_docx_insert_comment_on_paragraph(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_insert_comment_on_paragraph_with_http_info(req_config, opts)
      return data
    end

    # Insert a new comment into a Word DOCX document attached to a paragraph
    # Adds a new comment into a Word DOCX document attached to a paragraph and returns the result.  Call Finish Editing on the output URL to complete the operation.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(InsertDocxCommentOnParagraphResponse, Fixnum, Hash)>] InsertDocxCommentOnParagraphResponse data, response status code and response headers
    def edit_document_docx_insert_comment_on_paragraph_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_insert_comment_on_paragraph ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_insert_comment_on_paragraph"
      end
      # resource path
      local_var_path = "/convert/edit/docx/insert-comment/on/paragraph"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InsertDocxCommentOnParagraphResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_insert_comment_on_paragraph\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert image into a Word DOCX document
    # Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [DocxInsertImageResponse]
    def edit_document_docx_insert_image(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_insert_image_with_http_info(req_config, opts)
      return data
    end

    # Insert image into a Word DOCX document
    # Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocxInsertImageResponse, Fixnum, Hash)>] DocxInsertImageResponse data, response status code and response headers
    def edit_document_docx_insert_image_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_insert_image ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_insert_image"
      end
      # resource path
      local_var_path = "/convert/edit/docx/insert-image"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocxInsertImageResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_insert_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert a new paragraph into a Word DOCX document
    # Adds a new paragraph into a DOCX and returns the result.  You can insert at the beginning/end of a document, or before/after an existing object using its Path (location within the document).  Call Finish Editing on the output URL to complete the operation.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [InsertDocxInsertParagraphResponse]
    def edit_document_docx_insert_paragraph(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_insert_paragraph_with_http_info(req_config, opts)
      return data
    end

    # Insert a new paragraph into a Word DOCX document
    # Adds a new paragraph into a DOCX and returns the result.  You can insert at the beginning/end of a document, or before/after an existing object using its Path (location within the document).  Call Finish Editing on the output URL to complete the operation.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(InsertDocxInsertParagraphResponse, Fixnum, Hash)>] InsertDocxInsertParagraphResponse data, response status code and response headers
    def edit_document_docx_insert_paragraph_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_insert_paragraph ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_insert_paragraph"
      end
      # resource path
      local_var_path = "/convert/edit/docx/insert-paragraph"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InsertDocxInsertParagraphResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_insert_paragraph\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert a new table into a Word DOCX document
    # Adds a new table into a DOCX and returns the result.  Call Finish Editing on the output URL to complete the operation.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [InsertDocxTablesResponse]
    def edit_document_docx_insert_table(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_insert_table_with_http_info(req_config, opts)
      return data
    end

    # Insert a new table into a Word DOCX document
    # Adds a new table into a DOCX and returns the result.  Call Finish Editing on the output URL to complete the operation.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(InsertDocxTablesResponse, Fixnum, Hash)>] InsertDocxTablesResponse data, response status code and response headers
    def edit_document_docx_insert_table_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_insert_table ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_insert_table"
      end
      # resource path
      local_var_path = "/convert/edit/docx/insert-table"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InsertDocxTablesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_insert_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert a new row into an existing table in a Word DOCX document
    # Adds a new table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [InsertDocxTableRowResponse]
    def edit_document_docx_insert_table_row(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_insert_table_row_with_http_info(req_config, opts)
      return data
    end

    # Insert a new row into an existing table in a Word DOCX document
    # Adds a new table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(InsertDocxTableRowResponse, Fixnum, Hash)>] InsertDocxTableRowResponse data, response status code and response headers
    def edit_document_docx_insert_table_row_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_insert_table_row ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_insert_table_row"
      end
      # resource path
      local_var_path = "/convert/edit/docx/insert-table-row"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InsertDocxTableRowResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_insert_table_row\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages and content from a Word DOCX document
    # Returns the pages and contents of each page defined in the Word Document (DOCX) format file
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [GetDocxPagesResponse]
    def edit_document_docx_pages(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_pages_with_http_info(req_config, opts)
      return data
    end

    # Get pages and content from a Word DOCX document
    # Returns the pages and contents of each page defined in the Word Document (DOCX) format file
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetDocxPagesResponse, Fixnum, Hash)>] GetDocxPagesResponse data, response status code and response headers
    def edit_document_docx_pages_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_pages ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_pages"
      end
      # resource path
      local_var_path = "/convert/edit/docx/get-pages"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetDocxPagesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_pages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove headers and footers from Word DOCX document
    # Remove all headers, or footers, or both from a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [RemoveDocxHeadersAndFootersResponse]
    def edit_document_docx_remove_headers_and_footers(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_remove_headers_and_footers_with_http_info(req_config, opts)
      return data
    end

    # Remove headers and footers from Word DOCX document
    # Remove all headers, or footers, or both from a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(RemoveDocxHeadersAndFootersResponse, Fixnum, Hash)>] RemoveDocxHeadersAndFootersResponse data, response status code and response headers
    def edit_document_docx_remove_headers_and_footers_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_remove_headers_and_footers ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_remove_headers_and_footers"
      end
      # resource path
      local_var_path = "/convert/edit/docx/remove-headers-and-footers"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RemoveDocxHeadersAndFootersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_remove_headers_and_footers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete any object in a Word DOCX document
    # Delete any object, such as a paragraph, table, image, etc. from a Word Document (DOCX).  Pass in the Path of the object you would like to delete.  You can call other functions such as Get-Tables, Get-Images, Get-Body, etc. to get the paths of the objects in the document.  Call Finish Editing on the output URL to complete the operation.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [DocxRemoveObjectResponse]
    def edit_document_docx_remove_object(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_remove_object_with_http_info(req_config, opts)
      return data
    end

    # Delete any object in a Word DOCX document
    # Delete any object, such as a paragraph, table, image, etc. from a Word Document (DOCX).  Pass in the Path of the object you would like to delete.  You can call other functions such as Get-Tables, Get-Images, Get-Body, etc. to get the paths of the objects in the document.  Call Finish Editing on the output URL to complete the operation.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocxRemoveObjectResponse, Fixnum, Hash)>] DocxRemoveObjectResponse data, response status code and response headers
    def edit_document_docx_remove_object_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_remove_object ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_remove_object"
      end
      # resource path
      local_var_path = "/convert/edit/docx/remove-object"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocxRemoveObjectResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_remove_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace string in Word DOCX document
    # Replace all instances of a string in an Office Word Document (docx)
    # @param req_config Document string replacement configuration input
    # @param [Hash] opts the optional parameters
    # @return [String]
    def edit_document_docx_replace(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_replace_with_http_info(req_config, opts)
      return data
    end

    # Replace string in Word DOCX document
    # Replace all instances of a string in an Office Word Document (docx)
    # @param req_config Document string replacement configuration input
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def edit_document_docx_replace_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_replace ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_replace"
      end
      # resource path
      local_var_path = "/convert/edit/docx/replace-all"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_replace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the footer in a Word DOCX document
    # Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [DocxSetFooterResponse]
    def edit_document_docx_set_footer(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_set_footer_with_http_info(req_config, opts)
      return data
    end

    # Set the footer in a Word DOCX document
    # Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocxSetFooterResponse, Fixnum, Hash)>] DocxSetFooterResponse data, response status code and response headers
    def edit_document_docx_set_footer_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_set_footer ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_set_footer"
      end
      # resource path
      local_var_path = "/convert/edit/docx/set-footer"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocxSetFooterResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_set_footer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add page number to footer in a Word DOCX document
    # Set the footer in a Word Document (DOCX) to contain a page number.  Call Finish Editing on the output URL to complete the operation.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [DocxSetFooterResponse]
    def edit_document_docx_set_footer_add_page_number(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_set_footer_add_page_number_with_http_info(req_config, opts)
      return data
    end

    # Add page number to footer in a Word DOCX document
    # Set the footer in a Word Document (DOCX) to contain a page number.  Call Finish Editing on the output URL to complete the operation.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocxSetFooterResponse, Fixnum, Hash)>] DocxSetFooterResponse data, response status code and response headers
    def edit_document_docx_set_footer_add_page_number_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_set_footer_add_page_number ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_set_footer_add_page_number"
      end
      # resource path
      local_var_path = "/convert/edit/docx/set-footer/add-page-number"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocxSetFooterResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_set_footer_add_page_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the header in a Word DOCX document
    # Set the header in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [DocxSetHeaderResponse]
    def edit_document_docx_set_header(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_set_header_with_http_info(req_config, opts)
      return data
    end

    # Set the header in a Word DOCX document
    # Set the header in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocxSetHeaderResponse, Fixnum, Hash)>] DocxSetHeaderResponse data, response status code and response headers
    def edit_document_docx_set_header_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_set_header ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_set_header"
      end
      # resource path
      local_var_path = "/convert/edit/docx/set-header"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocxSetHeaderResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_set_header\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update, set contents of a table cell in an existing table in a Word DOCX document
    # Sets the contents of a table cell into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [UpdateDocxTableCellResponse]
    def edit_document_docx_update_table_cell(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_update_table_cell_with_http_info(req_config, opts)
      return data
    end

    # Update, set contents of a table cell in an existing table in a Word DOCX document
    # Sets the contents of a table cell into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateDocxTableCellResponse, Fixnum, Hash)>] UpdateDocxTableCellResponse data, response status code and response headers
    def edit_document_docx_update_table_cell_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_update_table_cell ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_update_table_cell"
      end
      # resource path
      local_var_path = "/convert/edit/docx/update-table-cell"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpdateDocxTableCellResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_update_table_cell\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update, set contents of a table row in an existing table in a Word DOCX document
    # Sets the contents of a table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [UpdateDocxTableRowResponse]
    def edit_document_docx_update_table_row(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_update_table_row_with_http_info(req_config, opts)
      return data
    end

    # Update, set contents of a table row in an existing table in a Word DOCX document
    # Sets the contents of a table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
    # @param req_config Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateDocxTableRowResponse, Fixnum, Hash)>] UpdateDocxTableRowResponse data, response status code and response headers
    def edit_document_docx_update_table_row_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_update_table_row ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_update_table_row"
      end
      # resource path
      local_var_path = "/convert/edit/docx/update-table-row"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpdateDocxTableRowResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_update_table_row\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Finish editing document, and download result from document editing
    # Once done editing a document, download the result.  Begin editing a document by calling begin-editing, then perform operations, then call finish-editing to get the result.
    # @param req_config Cloudmersive Document URL to complete editing on
    # @param [Hash] opts the optional parameters
    # @return [String]
    def edit_document_finish_editing(req_config, opts = {})
      data, _status_code, _headers = edit_document_finish_editing_with_http_info(req_config, opts)
      return data
    end

    # Finish editing document, and download result from document editing
    # Once done editing a document, download the result.  Begin editing a document by calling begin-editing, then perform operations, then call finish-editing to get the result.
    # @param req_config Cloudmersive Document URL to complete editing on
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def edit_document_finish_editing_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_finish_editing ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_finish_editing"
      end
      # resource path
      local_var_path = "/convert/edit/finish-editing"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_finish_editing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete, remove slides from a PowerPoint PPTX presentation document
    # Edits the input PowerPoint PPTX presentation document to remove the specified slides
    # @param req_config Presentation input request
    # @param [Hash] opts the optional parameters
    # @return [String]
    def edit_document_pptx_delete_slides(req_config, opts = {})
      data, _status_code, _headers = edit_document_pptx_delete_slides_with_http_info(req_config, opts)
      return data
    end

    # Delete, remove slides from a PowerPoint PPTX presentation document
    # Edits the input PowerPoint PPTX presentation document to remove the specified slides
    # @param req_config Presentation input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def edit_document_pptx_delete_slides_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_pptx_delete_slides ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_pptx_delete_slides"
      end
      # resource path
      local_var_path = "/convert/edit/pptx/delete-slides"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_pptx_delete_slides\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace string in PowerPoint PPTX presentation
    # Replace all instances of a string in an Office PowerPoint Document (pptx)
    # @param req_config Replacement document configuration input
    # @param [Hash] opts the optional parameters
    # @return [String]
    def edit_document_pptx_replace(req_config, opts = {})
      data, _status_code, _headers = edit_document_pptx_replace_with_http_info(req_config, opts)
      return data
    end

    # Replace string in PowerPoint PPTX presentation
    # Replace all instances of a string in an Office PowerPoint Document (pptx)
    # @param req_config Replacement document configuration input
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def edit_document_pptx_replace_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_pptx_replace ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_pptx_replace"
      end
      # resource path
      local_var_path = "/convert/edit/pptx/replace-all"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_pptx_replace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clear cell contents in an Excel XLSX spreadsheet, worksheet by index
    # Clears, sets to blank, the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [ClearXlsxCellResponse]
    def edit_document_xlsx_clear_cell_by_index(input, opts = {})
      data, _status_code, _headers = edit_document_xlsx_clear_cell_by_index_with_http_info(input, opts)
      return data
    end

    # Clear cell contents in an Excel XLSX spreadsheet, worksheet by index
    # Clears, sets to blank, the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClearXlsxCellResponse, Fixnum, Hash)>] ClearXlsxCellResponse data, response status code and response headers
    def edit_document_xlsx_clear_cell_by_index_with_http_info(input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_xlsx_clear_cell_by_index ..."
      end
      # verify the required parameter 'input' is set
      if @api_client.config.client_side_validation && input.nil?
        fail ArgumentError, "Missing the required parameter 'input' when calling EditDocumentApi.edit_document_xlsx_clear_cell_by_index"
      end
      # resource path
      local_var_path = "/convert/edit/xlsx/clear-cell/by-index"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(input)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClearXlsxCellResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_xlsx_clear_cell_by_index\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a blank Excel XLSX spreadsheet
    # Returns a blank Excel XLSX Spreadsheet (XLSX) format file
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [CreateBlankSpreadsheetResponse]
    def edit_document_xlsx_create_blank_spreadsheet(input, opts = {})
      data, _status_code, _headers = edit_document_xlsx_create_blank_spreadsheet_with_http_info(input, opts)
      return data
    end

    # Create a blank Excel XLSX spreadsheet
    # Returns a blank Excel XLSX Spreadsheet (XLSX) format file
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateBlankSpreadsheetResponse, Fixnum, Hash)>] CreateBlankSpreadsheetResponse data, response status code and response headers
    def edit_document_xlsx_create_blank_spreadsheet_with_http_info(input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_xlsx_create_blank_spreadsheet ..."
      end
      # verify the required parameter 'input' is set
      if @api_client.config.client_side_validation && input.nil?
        fail ArgumentError, "Missing the required parameter 'input' when calling EditDocumentApi.edit_document_xlsx_create_blank_spreadsheet"
      end
      # resource path
      local_var_path = "/convert/edit/xlsx/create/blank"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(input)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateBlankSpreadsheetResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_xlsx_create_blank_spreadsheet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Excel XLSX spreadsheet from column and row data
    # Returns a new Excel XLSX Spreadsheet (XLSX) format file populated with column and row data specified as input
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [CreateSpreadsheetFromDataResponse]
    def edit_document_xlsx_create_spreadsheet_from_data(input, opts = {})
      data, _status_code, _headers = edit_document_xlsx_create_spreadsheet_from_data_with_http_info(input, opts)
      return data
    end

    # Create a new Excel XLSX spreadsheet from column and row data
    # Returns a new Excel XLSX Spreadsheet (XLSX) format file populated with column and row data specified as input
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateSpreadsheetFromDataResponse, Fixnum, Hash)>] CreateSpreadsheetFromDataResponse data, response status code and response headers
    def edit_document_xlsx_create_spreadsheet_from_data_with_http_info(input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_xlsx_create_spreadsheet_from_data ..."
      end
      # verify the required parameter 'input' is set
      if @api_client.config.client_side_validation && input.nil?
        fail ArgumentError, "Missing the required parameter 'input' when calling EditDocumentApi.edit_document_xlsx_create_spreadsheet_from_data"
      end
      # resource path
      local_var_path = "/convert/edit/xlsx/create/from/data"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(input)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateSpreadsheetFromDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_xlsx_create_spreadsheet_from_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete, remove worksheet from an Excel XLSX spreadsheet document
    # Edits the input Excel XLSX spreadsheet document to remove the specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
    # @param req_config Spreadsheet input request
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def edit_document_xlsx_delete_worksheet(req_config, opts = {})
      data, _status_code, _headers = edit_document_xlsx_delete_worksheet_with_http_info(req_config, opts)
      return data
    end

    # Delete, remove worksheet from an Excel XLSX spreadsheet document
    # Edits the input Excel XLSX spreadsheet document to remove the specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
    # @param req_config Spreadsheet input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def edit_document_xlsx_delete_worksheet_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_xlsx_delete_worksheet ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_xlsx_delete_worksheet"
      end
      # resource path
      local_var_path = "/convert/edit/xlsx/delete-worksheet"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_xlsx_delete_worksheet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get cell from an Excel XLSX spreadsheet, worksheet by cell identifier
    # Returns the value of a specific cell based on its identifier (e.g. A1, B22, C33, etc.) in the Excel Spreadsheet worksheet
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [GetXlsxCellByIdentifierResponse]
    def edit_document_xlsx_get_cell_by_identifier(input, opts = {})
      data, _status_code, _headers = edit_document_xlsx_get_cell_by_identifier_with_http_info(input, opts)
      return data
    end

    # Get cell from an Excel XLSX spreadsheet, worksheet by cell identifier
    # Returns the value of a specific cell based on its identifier (e.g. A1, B22, C33, etc.) in the Excel Spreadsheet worksheet
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetXlsxCellByIdentifierResponse, Fixnum, Hash)>] GetXlsxCellByIdentifierResponse data, response status code and response headers
    def edit_document_xlsx_get_cell_by_identifier_with_http_info(input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_xlsx_get_cell_by_identifier ..."
      end
      # verify the required parameter 'input' is set
      if @api_client.config.client_side_validation && input.nil?
        fail ArgumentError, "Missing the required parameter 'input' when calling EditDocumentApi.edit_document_xlsx_get_cell_by_identifier"
      end
      # resource path
      local_var_path = "/convert/edit/xlsx/get-cell/by-identifier"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(input)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetXlsxCellByIdentifierResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_xlsx_get_cell_by_identifier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get cell from an Excel XLSX spreadsheet, worksheet by index
    # Returns the value and definition of a specific cell in a specific row in the Excel Spreadsheet worksheet
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [GetXlsxCellResponse]
    def edit_document_xlsx_get_cell_by_index(input, opts = {})
      data, _status_code, _headers = edit_document_xlsx_get_cell_by_index_with_http_info(input, opts)
      return data
    end

    # Get cell from an Excel XLSX spreadsheet, worksheet by index
    # Returns the value and definition of a specific cell in a specific row in the Excel Spreadsheet worksheet
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetXlsxCellResponse, Fixnum, Hash)>] GetXlsxCellResponse data, response status code and response headers
    def edit_document_xlsx_get_cell_by_index_with_http_info(input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_xlsx_get_cell_by_index ..."
      end
      # verify the required parameter 'input' is set
      if @api_client.config.client_side_validation && input.nil?
        fail ArgumentError, "Missing the required parameter 'input' when calling EditDocumentApi.edit_document_xlsx_get_cell_by_index"
      end
      # resource path
      local_var_path = "/convert/edit/xlsx/get-cell/by-index"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(input)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetXlsxCellResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_xlsx_get_cell_by_index\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get rows and cells from a Excel XLSX spreadsheet, worksheet
    # Returns the rows and cells defined in the Excel Spreadsheet worksheet
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [GetXlsxColumnsResponse]
    def edit_document_xlsx_get_columns(input, opts = {})
      data, _status_code, _headers = edit_document_xlsx_get_columns_with_http_info(input, opts)
      return data
    end

    # Get rows and cells from a Excel XLSX spreadsheet, worksheet
    # Returns the rows and cells defined in the Excel Spreadsheet worksheet
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetXlsxColumnsResponse, Fixnum, Hash)>] GetXlsxColumnsResponse data, response status code and response headers
    def edit_document_xlsx_get_columns_with_http_info(input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_xlsx_get_columns ..."
      end
      # verify the required parameter 'input' is set
      if @api_client.config.client_side_validation && input.nil?
        fail ArgumentError, "Missing the required parameter 'input' when calling EditDocumentApi.edit_document_xlsx_get_columns"
      end
      # resource path
      local_var_path = "/convert/edit/xlsx/get-columns"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(input)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetXlsxColumnsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_xlsx_get_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get images from a Excel XLSX spreadsheet, worksheet
    # Returns the images defined in the Excel Spreadsheet worksheet
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [GetXlsxImagesResponse]
    def edit_document_xlsx_get_images(input, opts = {})
      data, _status_code, _headers = edit_document_xlsx_get_images_with_http_info(input, opts)
      return data
    end

    # Get images from a Excel XLSX spreadsheet, worksheet
    # Returns the images defined in the Excel Spreadsheet worksheet
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetXlsxImagesResponse, Fixnum, Hash)>] GetXlsxImagesResponse data, response status code and response headers
    def edit_document_xlsx_get_images_with_http_info(input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_xlsx_get_images ..."
      end
      # verify the required parameter 'input' is set
      if @api_client.config.client_side_validation && input.nil?
        fail ArgumentError, "Missing the required parameter 'input' when calling EditDocumentApi.edit_document_xlsx_get_images"
      end
      # resource path
      local_var_path = "/convert/edit/xlsx/get-images"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(input)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetXlsxImagesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_xlsx_get_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get rows and cells from a Excel XLSX spreadsheet, worksheet
    # Returns the rows and cells defined in the Excel Spreadsheet worksheet
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [GetXlsxRowsAndCellsResponse]
    def edit_document_xlsx_get_rows_and_cells(input, opts = {})
      data, _status_code, _headers = edit_document_xlsx_get_rows_and_cells_with_http_info(input, opts)
      return data
    end

    # Get rows and cells from a Excel XLSX spreadsheet, worksheet
    # Returns the rows and cells defined in the Excel Spreadsheet worksheet
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetXlsxRowsAndCellsResponse, Fixnum, Hash)>] GetXlsxRowsAndCellsResponse data, response status code and response headers
    def edit_document_xlsx_get_rows_and_cells_with_http_info(input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_xlsx_get_rows_and_cells ..."
      end
      # verify the required parameter 'input' is set
      if @api_client.config.client_side_validation && input.nil?
        fail ArgumentError, "Missing the required parameter 'input' when calling EditDocumentApi.edit_document_xlsx_get_rows_and_cells"
      end
      # resource path
      local_var_path = "/convert/edit/xlsx/get-rows-and-cells"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(input)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetXlsxRowsAndCellsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_xlsx_get_rows_and_cells\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get styles from a Excel XLSX spreadsheet, worksheet
    # Returns the style defined in the Excel Spreadsheet
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [GetXlsxStylesResponse]
    def edit_document_xlsx_get_styles(input, opts = {})
      data, _status_code, _headers = edit_document_xlsx_get_styles_with_http_info(input, opts)
      return data
    end

    # Get styles from a Excel XLSX spreadsheet, worksheet
    # Returns the style defined in the Excel Spreadsheet
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetXlsxStylesResponse, Fixnum, Hash)>] GetXlsxStylesResponse data, response status code and response headers
    def edit_document_xlsx_get_styles_with_http_info(input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_xlsx_get_styles ..."
      end
      # verify the required parameter 'input' is set
      if @api_client.config.client_side_validation && input.nil?
        fail ArgumentError, "Missing the required parameter 'input' when calling EditDocumentApi.edit_document_xlsx_get_styles"
      end
      # resource path
      local_var_path = "/convert/edit/xlsx/get-styles"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(input)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetXlsxStylesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_xlsx_get_styles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get worksheets from a Excel XLSX spreadsheet
    # Returns the worksheets (tabs) defined in the Excel Spreadsheet (XLSX) format file
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [GetXlsxWorksheetsResponse]
    def edit_document_xlsx_get_worksheets(input, opts = {})
      data, _status_code, _headers = edit_document_xlsx_get_worksheets_with_http_info(input, opts)
      return data
    end

    # Get worksheets from a Excel XLSX spreadsheet
    # Returns the worksheets (tabs) defined in the Excel Spreadsheet (XLSX) format file
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetXlsxWorksheetsResponse, Fixnum, Hash)>] GetXlsxWorksheetsResponse data, response status code and response headers
    def edit_document_xlsx_get_worksheets_with_http_info(input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_xlsx_get_worksheets ..."
      end
      # verify the required parameter 'input' is set
      if @api_client.config.client_side_validation && input.nil?
        fail ArgumentError, "Missing the required parameter 'input' when calling EditDocumentApi.edit_document_xlsx_get_worksheets"
      end
      # resource path
      local_var_path = "/convert/edit/xlsx/get-worksheets"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(input)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetXlsxWorksheetsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_xlsx_get_worksheets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert a new worksheet into an Excel XLSX spreadsheet
    # Inserts a new worksheet into an Excel Spreadsheet
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [InsertXlsxWorksheetResponse]
    def edit_document_xlsx_insert_worksheet(input, opts = {})
      data, _status_code, _headers = edit_document_xlsx_insert_worksheet_with_http_info(input, opts)
      return data
    end

    # Insert a new worksheet into an Excel XLSX spreadsheet
    # Inserts a new worksheet into an Excel Spreadsheet
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(InsertXlsxWorksheetResponse, Fixnum, Hash)>] InsertXlsxWorksheetResponse data, response status code and response headers
    def edit_document_xlsx_insert_worksheet_with_http_info(input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_xlsx_insert_worksheet ..."
      end
      # verify the required parameter 'input' is set
      if @api_client.config.client_side_validation && input.nil?
        fail ArgumentError, "Missing the required parameter 'input' when calling EditDocumentApi.edit_document_xlsx_insert_worksheet"
      end
      # resource path
      local_var_path = "/convert/edit/xlsx/insert-worksheet"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(input)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InsertXlsxWorksheetResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_xlsx_insert_worksheet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set, update cell contents in an Excel XLSX spreadsheet, worksheet by cell identifier
    # Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet using its cell identifier (e.g. A1, B22, C33) in the worksheet
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [SetXlsxCellByIdentifierResponse]
    def edit_document_xlsx_set_cell_by_identifier(input, opts = {})
      data, _status_code, _headers = edit_document_xlsx_set_cell_by_identifier_with_http_info(input, opts)
      return data
    end

    # Set, update cell contents in an Excel XLSX spreadsheet, worksheet by cell identifier
    # Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet using its cell identifier (e.g. A1, B22, C33) in the worksheet
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetXlsxCellByIdentifierResponse, Fixnum, Hash)>] SetXlsxCellByIdentifierResponse data, response status code and response headers
    def edit_document_xlsx_set_cell_by_identifier_with_http_info(input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_xlsx_set_cell_by_identifier ..."
      end
      # verify the required parameter 'input' is set
      if @api_client.config.client_side_validation && input.nil?
        fail ArgumentError, "Missing the required parameter 'input' when calling EditDocumentApi.edit_document_xlsx_set_cell_by_identifier"
      end
      # resource path
      local_var_path = "/convert/edit/xlsx/set-cell/by-identifier"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(input)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SetXlsxCellByIdentifierResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_xlsx_set_cell_by_identifier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set, update cell contents in an Excel XLSX spreadsheet, worksheet by index
    # Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [SetXlsxCellResponse]
    def edit_document_xlsx_set_cell_by_index(input, opts = {})
      data, _status_code, _headers = edit_document_xlsx_set_cell_by_index_with_http_info(input, opts)
      return data
    end

    # Set, update cell contents in an Excel XLSX spreadsheet, worksheet by index
    # Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
    # @param input Document input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetXlsxCellResponse, Fixnum, Hash)>] SetXlsxCellResponse data, response status code and response headers
    def edit_document_xlsx_set_cell_by_index_with_http_info(input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_xlsx_set_cell_by_index ..."
      end
      # verify the required parameter 'input' is set
      if @api_client.config.client_side_validation && input.nil?
        fail ArgumentError, "Missing the required parameter 'input' when calling EditDocumentApi.edit_document_xlsx_set_cell_by_index"
      end
      # resource path
      local_var_path = "/convert/edit/xlsx/set-cell/by-index"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(input)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SetXlsxCellResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_xlsx_set_cell_by_index\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
