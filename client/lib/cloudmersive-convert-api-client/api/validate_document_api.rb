=begin
#convertapi

#Convert API lets you effortlessly convert file formats and types.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'uri'

module CloudmersiveConvertApiClient
  class ValidateDocumentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Autodetect content type and validate
    # Automatically detect the type of content, verify and validate that the content is indeed fully valid at depth, and then report the validation result.
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [AutodetectDocumentValidationResult]
    def validate_document_autodetect_validation(input_file, opts = {})
      data, _status_code, _headers = validate_document_autodetect_validation_with_http_info(input_file, opts)
      data
    end

    # Autodetect content type and validate
    # Automatically detect the type of content, verify and validate that the content is indeed fully valid at depth, and then report the validation result.
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AutodetectDocumentValidationResult, Fixnum, Hash)>] AutodetectDocumentValidationResult data, response status code and response headers
    def validate_document_autodetect_validation_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ValidateDocumentApi.validate_document_autodetect_validation ...'
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ValidateDocumentApi.validate_document_autodetect_validation"
      end
      # resource path
      local_var_path = '/convert/validate/autodetect'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['inputFile'] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AutodetectDocumentValidationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ValidateDocumentApi#validate_document_autodetect_validation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate a CSV file document (CSV)
    # Validate a CSV file document (CSV); if the document is not valid, identifies the errors in the document
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [DocumentValidationResult]
    def validate_document_csv_validation(input_file, opts = {})
      data, _status_code, _headers = validate_document_csv_validation_with_http_info(input_file, opts)
      data
    end

    # Validate a CSV file document (CSV)
    # Validate a CSV file document (CSV); if the document is not valid, identifies the errors in the document
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentValidationResult, Fixnum, Hash)>] DocumentValidationResult data, response status code and response headers
    def validate_document_csv_validation_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ValidateDocumentApi.validate_document_csv_validation ...'
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ValidateDocumentApi.validate_document_csv_validation"
      end
      # resource path
      local_var_path = '/convert/validate/csv'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['inputFile'] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocumentValidationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ValidateDocumentApi#validate_document_csv_validation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate a Word document (DOCX)
    # Validate a Word document (DOCX); if the document is not valid, identifies the errors in the document
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [DocumentValidationResult]
    def validate_document_docx_validation(input_file, opts = {})
      data, _status_code, _headers = validate_document_docx_validation_with_http_info(input_file, opts)
      data
    end

    # Validate a Word document (DOCX)
    # Validate a Word document (DOCX); if the document is not valid, identifies the errors in the document
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentValidationResult, Fixnum, Hash)>] DocumentValidationResult data, response status code and response headers
    def validate_document_docx_validation_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ValidateDocumentApi.validate_document_docx_validation ...'
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ValidateDocumentApi.validate_document_docx_validation"
      end
      # resource path
      local_var_path = '/convert/validate/docx'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['inputFile'] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocumentValidationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ValidateDocumentApi#validate_document_docx_validation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate if an EML file is executable
    # Validate if an input file is an EML email file; if the document is not valid
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [DocumentValidationResult]
    def validate_document_eml_validation(input_file, opts = {})
      data, _status_code, _headers = validate_document_eml_validation_with_http_info(input_file, opts)
      data
    end

    # Validate if an EML file is executable
    # Validate if an input file is an EML email file; if the document is not valid
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentValidationResult, Fixnum, Hash)>] DocumentValidationResult data, response status code and response headers
    def validate_document_eml_validation_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ValidateDocumentApi.validate_document_eml_validation ...'
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ValidateDocumentApi.validate_document_eml_validation"
      end
      # resource path
      local_var_path = '/convert/validate/eml'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['inputFile'] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocumentValidationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ValidateDocumentApi#validate_document_eml_validation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate if a file is executable
    # Validate if an input file is a binary executable file; if the document is not valid
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [DocumentValidationResult]
    def validate_document_executable_validation(input_file, opts = {})
      data, _status_code, _headers = validate_document_executable_validation_with_http_info(input_file, opts)
      data
    end

    # Validate if a file is executable
    # Validate if an input file is a binary executable file; if the document is not valid
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentValidationResult, Fixnum, Hash)>] DocumentValidationResult data, response status code and response headers
    def validate_document_executable_validation_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ValidateDocumentApi.validate_document_executable_validation ...'
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ValidateDocumentApi.validate_document_executable_validation"
      end
      # resource path
      local_var_path = '/convert/validate/executable'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['inputFile'] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocumentValidationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ValidateDocumentApi#validate_document_executable_validation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate a GZip Archive file (gzip or gz)
    # Validate a GZip archive file (GZIP or GZ)
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [DocumentValidationResult]
    def validate_document_g_zip_validation(input_file, opts = {})
      data, _status_code, _headers = validate_document_g_zip_validation_with_http_info(input_file, opts)
      data
    end

    # Validate a GZip Archive file (gzip or gz)
    # Validate a GZip archive file (GZIP or GZ)
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentValidationResult, Fixnum, Hash)>] DocumentValidationResult data, response status code and response headers
    def validate_document_g_zip_validation_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ValidateDocumentApi.validate_document_g_zip_validation ...'
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ValidateDocumentApi.validate_document_g_zip_validation"
      end
      # resource path
      local_var_path = '/convert/validate/gzip'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['inputFile'] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocumentValidationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ValidateDocumentApi#validate_document_g_zip_validation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate an HTML file
    # Validate an HTML document file; if the document is not valid, identifies the errors in the document
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [DocumentValidationResult]
    def validate_document_html_validation(input_file, opts = {})
      data, _status_code, _headers = validate_document_html_validation_with_http_info(input_file, opts)
      data
    end

    # Validate an HTML file
    # Validate an HTML document file; if the document is not valid, identifies the errors in the document
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentValidationResult, Fixnum, Hash)>] DocumentValidationResult data, response status code and response headers
    def validate_document_html_validation_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ValidateDocumentApi.validate_document_html_validation ...'
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ValidateDocumentApi.validate_document_html_validation"
      end
      # resource path
      local_var_path = '/convert/validate/html'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['inputFile'] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocumentValidationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ValidateDocumentApi#validate_document_html_validation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate an Image File
    # Validate an image file; if the document is not valid, identifies the errors in the document.  Formats supported include AAI, ART, ARW, AVS, BPG, BMP, BMP2, BMP3, BRF, CALS, CGM, CIN, CMYK, CMYKA, CR2, CRW, CUR, CUT, DCM, DCR, DCX, DDS, DIB, DJVU, DNG, DOT, DPX, EMF, EPDF, EPI, EPS, EPS2, EPS3, EPSF, EPSI, EPT, EXR, FAX, FIG, FITS, FPX, GIF, GPLT, GRAY, HDR, HEIC, HPGL, HRZ, ICO, ISOBRL, ISBRL6, JBIG, JNG, JP2, JPT, J2C, J2K, JPEG/JPG, JXR, MAT, MONO, MNG, M2V, MRW, MTV, NEF, ORF, OTB, P7, PALM, PAM, PBM, PCD, PCDS, PCL, PCX, PDF, PEF, PES, PFA, PFB, PFM, PGM, PICON, PICT, PIX, PNG, PNG8, PNG00, PNG24, PNG32, PNG48, PNG64, PNM, PPM, PSB, PSD, PTIF, PWB, RAD, RAF, RGB, RGBA, RGF, RLA, RLE, SCT, SFW, SGI, SID, SUN, SVG, TGA, TIFF, TIM, UIL, VIFF, VICAR, VBMP, WDP, WEBP, WPG, X, XBM, XCF, XPM, XWD, X3F, YCbCr, YCbCrA, YUV.
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [DocumentValidationResult]
    def validate_document_image_validation(input_file, opts = {})
      data, _status_code, _headers = validate_document_image_validation_with_http_info(input_file, opts)
      data
    end

    # Validate an Image File
    # Validate an image file; if the document is not valid, identifies the errors in the document.  Formats supported include AAI, ART, ARW, AVS, BPG, BMP, BMP2, BMP3, BRF, CALS, CGM, CIN, CMYK, CMYKA, CR2, CRW, CUR, CUT, DCM, DCR, DCX, DDS, DIB, DJVU, DNG, DOT, DPX, EMF, EPDF, EPI, EPS, EPS2, EPS3, EPSF, EPSI, EPT, EXR, FAX, FIG, FITS, FPX, GIF, GPLT, GRAY, HDR, HEIC, HPGL, HRZ, ICO, ISOBRL, ISBRL6, JBIG, JNG, JP2, JPT, J2C, J2K, JPEG/JPG, JXR, MAT, MONO, MNG, M2V, MRW, MTV, NEF, ORF, OTB, P7, PALM, PAM, PBM, PCD, PCDS, PCL, PCX, PDF, PEF, PES, PFA, PFB, PFM, PGM, PICON, PICT, PIX, PNG, PNG8, PNG00, PNG24, PNG32, PNG48, PNG64, PNM, PPM, PSB, PSD, PTIF, PWB, RAD, RAF, RGB, RGBA, RGF, RLA, RLE, SCT, SFW, SGI, SID, SUN, SVG, TGA, TIFF, TIM, UIL, VIFF, VICAR, VBMP, WDP, WEBP, WPG, X, XBM, XCF, XPM, XWD, X3F, YCbCr, YCbCrA, YUV.
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentValidationResult, Fixnum, Hash)>] DocumentValidationResult data, response status code and response headers
    def validate_document_image_validation_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ValidateDocumentApi.validate_document_image_validation ...'
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ValidateDocumentApi.validate_document_image_validation"
      end
      # resource path
      local_var_path = '/convert/validate/image'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['inputFile'] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocumentValidationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ValidateDocumentApi#validate_document_image_validation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate a JSON file
    # Validate a JSON (JavaScript Object Notation) document file; if the document is not valid, identifies the errors in the document
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [DocumentValidationResult]
    def validate_document_json_validation(input_file, opts = {})
      data, _status_code, _headers = validate_document_json_validation_with_http_info(input_file, opts)
      data
    end

    # Validate a JSON file
    # Validate a JSON (JavaScript Object Notation) document file; if the document is not valid, identifies the errors in the document
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentValidationResult, Fixnum, Hash)>] DocumentValidationResult data, response status code and response headers
    def validate_document_json_validation_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ValidateDocumentApi.validate_document_json_validation ...'
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ValidateDocumentApi.validate_document_json_validation"
      end
      # resource path
      local_var_path = '/convert/validate/json'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['inputFile'] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocumentValidationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ValidateDocumentApi#validate_document_json_validation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate if an MSG file is executable
    # Validate if an input file is an MSG email file; if the document is not valid
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [DocumentValidationResult]
    def validate_document_msg_validation(input_file, opts = {})
      data, _status_code, _headers = validate_document_msg_validation_with_http_info(input_file, opts)
      data
    end

    # Validate if an MSG file is executable
    # Validate if an input file is an MSG email file; if the document is not valid
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentValidationResult, Fixnum, Hash)>] DocumentValidationResult data, response status code and response headers
    def validate_document_msg_validation_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ValidateDocumentApi.validate_document_msg_validation ...'
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ValidateDocumentApi.validate_document_msg_validation"
      end
      # resource path
      local_var_path = '/convert/validate/msg'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['inputFile'] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocumentValidationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ValidateDocumentApi#validate_document_msg_validation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate a PDF document file
    # Validate a PDF document; if the document is not valid, identifies the errors in the document.  Also checks if the PDF is password protected.
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [DocumentValidationResult]
    def validate_document_pdf_validation(input_file, opts = {})
      data, _status_code, _headers = validate_document_pdf_validation_with_http_info(input_file, opts)
      data
    end

    # Validate a PDF document file
    # Validate a PDF document; if the document is not valid, identifies the errors in the document.  Also checks if the PDF is password protected.
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentValidationResult, Fixnum, Hash)>] DocumentValidationResult data, response status code and response headers
    def validate_document_pdf_validation_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ValidateDocumentApi.validate_document_pdf_validation ...'
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ValidateDocumentApi.validate_document_pdf_validation"
      end
      # resource path
      local_var_path = '/convert/validate/pdf'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['inputFile'] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocumentValidationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ValidateDocumentApi#validate_document_pdf_validation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate a PowerPoint presentation (PPTX)
    # Validate a PowerPoint presentation (PPTX); if the document is not valid, identifies the errors in the document
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [DocumentValidationResult]
    def validate_document_pptx_validation(input_file, opts = {})
      data, _status_code, _headers = validate_document_pptx_validation_with_http_info(input_file, opts)
      data
    end

    # Validate a PowerPoint presentation (PPTX)
    # Validate a PowerPoint presentation (PPTX); if the document is not valid, identifies the errors in the document
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentValidationResult, Fixnum, Hash)>] DocumentValidationResult data, response status code and response headers
    def validate_document_pptx_validation_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ValidateDocumentApi.validate_document_pptx_validation ...'
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ValidateDocumentApi.validate_document_pptx_validation"
      end
      # resource path
      local_var_path = '/convert/validate/pptx'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['inputFile'] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocumentValidationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ValidateDocumentApi#validate_document_pptx_validation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate a RAR Archive file (RAR)
    # Validate a RAR archive file (RAR)
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [DocumentValidationResult]
    def validate_document_rar_validation(input_file, opts = {})
      data, _status_code, _headers = validate_document_rar_validation_with_http_info(input_file, opts)
      data
    end

    # Validate a RAR Archive file (RAR)
    # Validate a RAR archive file (RAR)
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentValidationResult, Fixnum, Hash)>] DocumentValidationResult data, response status code and response headers
    def validate_document_rar_validation_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ValidateDocumentApi.validate_document_rar_validation ...'
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ValidateDocumentApi.validate_document_rar_validation"
      end
      # resource path
      local_var_path = '/convert/validate/rar'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['inputFile'] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocumentValidationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ValidateDocumentApi#validate_document_rar_validation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate a TAR Tarball Archive file (TAR)
    # Validate a TAR tarball archive file (TAR)
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [DocumentValidationResult]
    def validate_document_tar_validation(input_file, opts = {})
      data, _status_code, _headers = validate_document_tar_validation_with_http_info(input_file, opts)
      data
    end

    # Validate a TAR Tarball Archive file (TAR)
    # Validate a TAR tarball archive file (TAR)
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentValidationResult, Fixnum, Hash)>] DocumentValidationResult data, response status code and response headers
    def validate_document_tar_validation_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ValidateDocumentApi.validate_document_tar_validation ...'
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ValidateDocumentApi.validate_document_tar_validation"
      end
      # resource path
      local_var_path = '/convert/validate/tar'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['inputFile'] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocumentValidationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ValidateDocumentApi#validate_document_tar_validation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate a Excel document (XLSX)
    # Validate a Excel document (XLSX); if the document is not valid, identifies the errors in the document
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [DocumentValidationResult]
    def validate_document_xlsx_validation(input_file, opts = {})
      data, _status_code, _headers = validate_document_xlsx_validation_with_http_info(input_file, opts)
      data
    end

    # Validate a Excel document (XLSX)
    # Validate a Excel document (XLSX); if the document is not valid, identifies the errors in the document
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentValidationResult, Fixnum, Hash)>] DocumentValidationResult data, response status code and response headers
    def validate_document_xlsx_validation_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ValidateDocumentApi.validate_document_xlsx_validation ...'
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ValidateDocumentApi.validate_document_xlsx_validation"
      end
      # resource path
      local_var_path = '/convert/validate/xlsx'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['inputFile'] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocumentValidationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ValidateDocumentApi#validate_document_xlsx_validation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate an XML file
    # Validate an XML document file; if the document is not valid, identifies the errors in the document
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [DocumentValidationResult]
    def validate_document_xml_validation(input_file, opts = {})
      data, _status_code, _headers = validate_document_xml_validation_with_http_info(input_file, opts)
      data
    end

    # Validate an XML file
    # Validate an XML document file; if the document is not valid, identifies the errors in the document
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentValidationResult, Fixnum, Hash)>] DocumentValidationResult data, response status code and response headers
    def validate_document_xml_validation_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ValidateDocumentApi.validate_document_xml_validation ...'
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ValidateDocumentApi.validate_document_xml_validation"
      end
      # resource path
      local_var_path = '/convert/validate/xml'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['inputFile'] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocumentValidationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ValidateDocumentApi#validate_document_xml_validation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate a Zip Archive file (zip)
    # Validate a Zip archive file (ZIP)
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [DocumentValidationResult]
    def validate_document_zip_validation(input_file, opts = {})
      data, _status_code, _headers = validate_document_zip_validation_with_http_info(input_file, opts)
      data
    end

    # Validate a Zip Archive file (zip)
    # Validate a Zip archive file (ZIP)
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentValidationResult, Fixnum, Hash)>] DocumentValidationResult data, response status code and response headers
    def validate_document_zip_validation_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ValidateDocumentApi.validate_document_zip_validation ...'
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ValidateDocumentApi.validate_document_zip_validation"
      end
      # resource path
      local_var_path = '/convert/validate/zip'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['inputFile'] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocumentValidationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ValidateDocumentApi#validate_document_zip_validation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
