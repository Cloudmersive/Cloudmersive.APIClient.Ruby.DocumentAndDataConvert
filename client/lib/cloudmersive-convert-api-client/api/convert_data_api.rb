=begin
#convertapi

#Convert API lets you effortlessly convert file formats and types.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module CloudmersiveConvertApiClient
  class ConvertDataApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Convert CSV to JSON conversion
    # Convert a CSV file to a JSON object array
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def convert_data_csv_to_json(input_file, opts = {})
      data, _status_code, _headers = convert_data_csv_to_json_with_http_info(input_file, opts)
      return data
    end

    # Convert CSV to JSON conversion
    # Convert a CSV file to a JSON object array
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def convert_data_csv_to_json_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConvertDataApi.convert_data_csv_to_json ..."
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ConvertDataApi.convert_data_csv_to_json"
      end
      # resource path
      local_var_path = "/convert/csv/to/json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["inputFile"] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConvertDataApi#convert_data_csv_to_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Convert JSON to XML conversion
    # Convert a JSON object into XML
    # @param json_object 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def convert_data_json_to_xml(json_object, opts = {})
      data, _status_code, _headers = convert_data_json_to_xml_with_http_info(json_object, opts)
      return data
    end

    # Convert JSON to XML conversion
    # Convert a JSON object into XML
    # @param json_object 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def convert_data_json_to_xml_with_http_info(json_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConvertDataApi.convert_data_json_to_xml ..."
      end
      # verify the required parameter 'json_object' is set
      if @api_client.config.client_side_validation && json_object.nil?
        fail ArgumentError, "Missing the required parameter 'json_object' when calling ConvertDataApi.convert_data_json_to_xml"
      end
      # resource path
      local_var_path = "/convert/json/to/xml"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(json_object)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConvertDataApi#convert_data_json_to_xml\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Convert Excel (97-2003) XLS to JSON conversion
    # Convert an Excel (97-2003) XLS file to a JSON object array
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def convert_data_xls_to_json(input_file, opts = {})
      data, _status_code, _headers = convert_data_xls_to_json_with_http_info(input_file, opts)
      return data
    end

    # Convert Excel (97-2003) XLS to JSON conversion
    # Convert an Excel (97-2003) XLS file to a JSON object array
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def convert_data_xls_to_json_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConvertDataApi.convert_data_xls_to_json ..."
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ConvertDataApi.convert_data_xls_to_json"
      end
      # resource path
      local_var_path = "/convert/xls/to/json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["inputFile"] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConvertDataApi#convert_data_xls_to_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Convert Excel XLSX to JSON conversion
    # Convert an Excel XLSX file to a JSON object array
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def convert_data_xlsx_to_json(input_file, opts = {})
      data, _status_code, _headers = convert_data_xlsx_to_json_with_http_info(input_file, opts)
      return data
    end

    # Convert Excel XLSX to JSON conversion
    # Convert an Excel XLSX file to a JSON object array
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def convert_data_xlsx_to_json_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConvertDataApi.convert_data_xlsx_to_json ..."
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ConvertDataApi.convert_data_xlsx_to_json"
      end
      # resource path
      local_var_path = "/convert/xlsx/to/json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["inputFile"] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConvertDataApi#convert_data_xlsx_to_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds an attribute to all XML nodes matching XPath expression
    # Return the reuslts of editing an XML document by adding an attribute to all of the nodes that match an input XPath expression.
    # @param input_file Input XML file to perform the operation on.
    # @param x_path_expression Valid XML XPath query expression
    # @param xml_attribute_name Name of the XML attribute to add
    # @param xml_attribute_value Value of the XML attribute to add
    # @param [Hash] opts the optional parameters
    # @return [XmlAddAttributeWithXPathResult]
    def convert_data_xml_edit_add_attribute_with_x_path(input_file, x_path_expression, xml_attribute_name, xml_attribute_value, opts = {})
      data, _status_code, _headers = convert_data_xml_edit_add_attribute_with_x_path_with_http_info(input_file, x_path_expression, xml_attribute_name, xml_attribute_value, opts)
      return data
    end

    # Adds an attribute to all XML nodes matching XPath expression
    # Return the reuslts of editing an XML document by adding an attribute to all of the nodes that match an input XPath expression.
    # @param input_file Input XML file to perform the operation on.
    # @param x_path_expression Valid XML XPath query expression
    # @param xml_attribute_name Name of the XML attribute to add
    # @param xml_attribute_value Value of the XML attribute to add
    # @param [Hash] opts the optional parameters
    # @return [Array<(XmlAddAttributeWithXPathResult, Fixnum, Hash)>] XmlAddAttributeWithXPathResult data, response status code and response headers
    def convert_data_xml_edit_add_attribute_with_x_path_with_http_info(input_file, x_path_expression, xml_attribute_name, xml_attribute_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConvertDataApi.convert_data_xml_edit_add_attribute_with_x_path ..."
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ConvertDataApi.convert_data_xml_edit_add_attribute_with_x_path"
      end
      # verify the required parameter 'x_path_expression' is set
      if @api_client.config.client_side_validation && x_path_expression.nil?
        fail ArgumentError, "Missing the required parameter 'x_path_expression' when calling ConvertDataApi.convert_data_xml_edit_add_attribute_with_x_path"
      end
      # verify the required parameter 'xml_attribute_name' is set
      if @api_client.config.client_side_validation && xml_attribute_name.nil?
        fail ArgumentError, "Missing the required parameter 'xml_attribute_name' when calling ConvertDataApi.convert_data_xml_edit_add_attribute_with_x_path"
      end
      # verify the required parameter 'xml_attribute_value' is set
      if @api_client.config.client_side_validation && xml_attribute_value.nil?
        fail ArgumentError, "Missing the required parameter 'xml_attribute_value' when calling ConvertDataApi.convert_data_xml_edit_add_attribute_with_x_path"
      end
      # resource path
      local_var_path = "/convert/xml/edit/xpath/add-attribute"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      header_params[:'XPathExpression'] = x_path_expression
      header_params[:'XmlAttributeName'] = xml_attribute_name
      header_params[:'XmlAttributeValue'] = xml_attribute_value

      # form parameters
      form_params = {}
      form_params["inputFile"] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'XmlAddAttributeWithXPathResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConvertDataApi#convert_data_xml_edit_add_attribute_with_x_path\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds an XML node as a child to XML nodes matching XPath expression
    # Return the reuslts of editing an XML document by adding an XML node as a child to all of the nodes that match an input XPath expression.
    # @param input_file Input XML file to perform the operation on.
    # @param x_path_expression Valid XML XPath query expression
    # @param xml_node_to_add XML Node to add as a child
    # @param [Hash] opts the optional parameters
    # @return [XmlAddChildWithXPathResult]
    def convert_data_xml_edit_add_child_with_x_path(input_file, x_path_expression, xml_node_to_add, opts = {})
      data, _status_code, _headers = convert_data_xml_edit_add_child_with_x_path_with_http_info(input_file, x_path_expression, xml_node_to_add, opts)
      return data
    end

    # Adds an XML node as a child to XML nodes matching XPath expression
    # Return the reuslts of editing an XML document by adding an XML node as a child to all of the nodes that match an input XPath expression.
    # @param input_file Input XML file to perform the operation on.
    # @param x_path_expression Valid XML XPath query expression
    # @param xml_node_to_add XML Node to add as a child
    # @param [Hash] opts the optional parameters
    # @return [Array<(XmlAddChildWithXPathResult, Fixnum, Hash)>] XmlAddChildWithXPathResult data, response status code and response headers
    def convert_data_xml_edit_add_child_with_x_path_with_http_info(input_file, x_path_expression, xml_node_to_add, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConvertDataApi.convert_data_xml_edit_add_child_with_x_path ..."
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ConvertDataApi.convert_data_xml_edit_add_child_with_x_path"
      end
      # verify the required parameter 'x_path_expression' is set
      if @api_client.config.client_side_validation && x_path_expression.nil?
        fail ArgumentError, "Missing the required parameter 'x_path_expression' when calling ConvertDataApi.convert_data_xml_edit_add_child_with_x_path"
      end
      # verify the required parameter 'xml_node_to_add' is set
      if @api_client.config.client_side_validation && xml_node_to_add.nil?
        fail ArgumentError, "Missing the required parameter 'xml_node_to_add' when calling ConvertDataApi.convert_data_xml_edit_add_child_with_x_path"
      end
      # resource path
      local_var_path = "/convert/xml/edit/xpath/add-child"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      header_params[:'XPathExpression'] = x_path_expression
      header_params[:'XmlNodeToAdd'] = xml_node_to_add

      # form parameters
      form_params = {}
      form_params["inputFile"] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'XmlAddChildWithXPathResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConvertDataApi#convert_data_xml_edit_add_child_with_x_path\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes, deletes all children of nodes matching XPath expression, but does not remove the nodes
    # Return the reuslts of editing an XML document by removing all child nodes of the nodes that match an input XPath expression.
    # @param input_file Input XML file to perform the operation on.
    # @param x_path_expression Valid XML XPath query expression
    # @param [Hash] opts the optional parameters
    # @return [XmlRemoveAllChildrenWithXPathResult]
    def convert_data_xml_edit_remove_all_child_nodes_with_x_path(input_file, x_path_expression, opts = {})
      data, _status_code, _headers = convert_data_xml_edit_remove_all_child_nodes_with_x_path_with_http_info(input_file, x_path_expression, opts)
      return data
    end

    # Removes, deletes all children of nodes matching XPath expression, but does not remove the nodes
    # Return the reuslts of editing an XML document by removing all child nodes of the nodes that match an input XPath expression.
    # @param input_file Input XML file to perform the operation on.
    # @param x_path_expression Valid XML XPath query expression
    # @param [Hash] opts the optional parameters
    # @return [Array<(XmlRemoveAllChildrenWithXPathResult, Fixnum, Hash)>] XmlRemoveAllChildrenWithXPathResult data, response status code and response headers
    def convert_data_xml_edit_remove_all_child_nodes_with_x_path_with_http_info(input_file, x_path_expression, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConvertDataApi.convert_data_xml_edit_remove_all_child_nodes_with_x_path ..."
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ConvertDataApi.convert_data_xml_edit_remove_all_child_nodes_with_x_path"
      end
      # verify the required parameter 'x_path_expression' is set
      if @api_client.config.client_side_validation && x_path_expression.nil?
        fail ArgumentError, "Missing the required parameter 'x_path_expression' when calling ConvertDataApi.convert_data_xml_edit_remove_all_child_nodes_with_x_path"
      end
      # resource path
      local_var_path = "/convert/xml/edit/xpath/remove-all-children"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      header_params[:'XPathExpression'] = x_path_expression

      # form parameters
      form_params = {}
      form_params["inputFile"] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'XmlRemoveAllChildrenWithXPathResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConvertDataApi#convert_data_xml_edit_remove_all_child_nodes_with_x_path\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replaces XML nodes matching XPath expression with new node
    # Return the reuslts of editing an XML document by replacing all of the nodes that match an input XPath expression with a new XML node expression.
    # @param input_file Input XML file to perform the operation on.
    # @param x_path_expression Valid XML XPath query expression
    # @param xml_node_replacement XML Node replacement content
    # @param [Hash] opts the optional parameters
    # @return [XmlReplaceWithXPathResult]
    def convert_data_xml_edit_replace_with_x_path(input_file, x_path_expression, xml_node_replacement, opts = {})
      data, _status_code, _headers = convert_data_xml_edit_replace_with_x_path_with_http_info(input_file, x_path_expression, xml_node_replacement, opts)
      return data
    end

    # Replaces XML nodes matching XPath expression with new node
    # Return the reuslts of editing an XML document by replacing all of the nodes that match an input XPath expression with a new XML node expression.
    # @param input_file Input XML file to perform the operation on.
    # @param x_path_expression Valid XML XPath query expression
    # @param xml_node_replacement XML Node replacement content
    # @param [Hash] opts the optional parameters
    # @return [Array<(XmlReplaceWithXPathResult, Fixnum, Hash)>] XmlReplaceWithXPathResult data, response status code and response headers
    def convert_data_xml_edit_replace_with_x_path_with_http_info(input_file, x_path_expression, xml_node_replacement, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConvertDataApi.convert_data_xml_edit_replace_with_x_path ..."
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ConvertDataApi.convert_data_xml_edit_replace_with_x_path"
      end
      # verify the required parameter 'x_path_expression' is set
      if @api_client.config.client_side_validation && x_path_expression.nil?
        fail ArgumentError, "Missing the required parameter 'x_path_expression' when calling ConvertDataApi.convert_data_xml_edit_replace_with_x_path"
      end
      # verify the required parameter 'xml_node_replacement' is set
      if @api_client.config.client_side_validation && xml_node_replacement.nil?
        fail ArgumentError, "Missing the required parameter 'xml_node_replacement' when calling ConvertDataApi.convert_data_xml_edit_replace_with_x_path"
      end
      # resource path
      local_var_path = "/convert/xml/edit/xpath/replace"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      header_params[:'XPathExpression'] = x_path_expression
      header_params[:'XmlNodeReplacement'] = xml_node_replacement

      # form parameters
      form_params = {}
      form_params["inputFile"] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'XmlReplaceWithXPathResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConvertDataApi#convert_data_xml_edit_replace_with_x_path\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sets the value contents of XML nodes matching XPath expression
    # Return the reuslts of editing an XML document by setting the contents of all of the nodes that match an input XPath expression.  Supports elements and attributes.
    # @param input_file Input XML file to perform the operation on.
    # @param x_path_expression Valid XML XPath query expression
    # @param xml_value XML Value to set into the matching XML nodes
    # @param [Hash] opts the optional parameters
    # @return [XmlSetValueWithXPathResult]
    def convert_data_xml_edit_set_value_with_x_path(input_file, x_path_expression, xml_value, opts = {})
      data, _status_code, _headers = convert_data_xml_edit_set_value_with_x_path_with_http_info(input_file, x_path_expression, xml_value, opts)
      return data
    end

    # Sets the value contents of XML nodes matching XPath expression
    # Return the reuslts of editing an XML document by setting the contents of all of the nodes that match an input XPath expression.  Supports elements and attributes.
    # @param input_file Input XML file to perform the operation on.
    # @param x_path_expression Valid XML XPath query expression
    # @param xml_value XML Value to set into the matching XML nodes
    # @param [Hash] opts the optional parameters
    # @return [Array<(XmlSetValueWithXPathResult, Fixnum, Hash)>] XmlSetValueWithXPathResult data, response status code and response headers
    def convert_data_xml_edit_set_value_with_x_path_with_http_info(input_file, x_path_expression, xml_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConvertDataApi.convert_data_xml_edit_set_value_with_x_path ..."
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ConvertDataApi.convert_data_xml_edit_set_value_with_x_path"
      end
      # verify the required parameter 'x_path_expression' is set
      if @api_client.config.client_side_validation && x_path_expression.nil?
        fail ArgumentError, "Missing the required parameter 'x_path_expression' when calling ConvertDataApi.convert_data_xml_edit_set_value_with_x_path"
      end
      # verify the required parameter 'xml_value' is set
      if @api_client.config.client_side_validation && xml_value.nil?
        fail ArgumentError, "Missing the required parameter 'xml_value' when calling ConvertDataApi.convert_data_xml_edit_set_value_with_x_path"
      end
      # resource path
      local_var_path = "/convert/xml/edit/xpath/set-value"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      header_params[:'XPathExpression'] = x_path_expression
      header_params[:'XmlValue'] = xml_value

      # form parameters
      form_params = {}
      form_params["inputFile"] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'XmlSetValueWithXPathResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConvertDataApi#convert_data_xml_edit_set_value_with_x_path\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Filter, select XML nodes using XPath expression, get results
    # Return the reuslts of filtering, selecting an XML document with an XPath expression
    # @param x_path_expression Valid XML XPath query expression
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [XmlFilterWithXPathResult]
    def convert_data_xml_filter_with_x_path(x_path_expression, input_file, opts = {})
      data, _status_code, _headers = convert_data_xml_filter_with_x_path_with_http_info(x_path_expression, input_file, opts)
      return data
    end

    # Filter, select XML nodes using XPath expression, get results
    # Return the reuslts of filtering, selecting an XML document with an XPath expression
    # @param x_path_expression Valid XML XPath query expression
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(XmlFilterWithXPathResult, Fixnum, Hash)>] XmlFilterWithXPathResult data, response status code and response headers
    def convert_data_xml_filter_with_x_path_with_http_info(x_path_expression, input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConvertDataApi.convert_data_xml_filter_with_x_path ..."
      end
      # verify the required parameter 'x_path_expression' is set
      if @api_client.config.client_side_validation && x_path_expression.nil?
        fail ArgumentError, "Missing the required parameter 'x_path_expression' when calling ConvertDataApi.convert_data_xml_filter_with_x_path"
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ConvertDataApi.convert_data_xml_filter_with_x_path"
      end
      # resource path
      local_var_path = "/convert/xml/select/xpath"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])
      header_params[:'XPathExpression'] = x_path_expression

      # form parameters
      form_params = {}
      form_params["inputFile"] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'XmlFilterWithXPathResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConvertDataApi#convert_data_xml_filter_with_x_path\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query an XML file using XQuery query, get results
    # Return the reuslts of querying a single XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for a single XML document as input.  Provided XML document is automatically loaded as the default context; to access elements in the document, simply refer to them without a document reference, such as bookstore/book
    # @param input_file Input XML file to perform the operation on.
    # @param x_query Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported
    # @param [Hash] opts the optional parameters
    # @return [XmlQueryWithXQueryResult]
    def convert_data_xml_query_with_x_query(input_file, x_query, opts = {})
      data, _status_code, _headers = convert_data_xml_query_with_x_query_with_http_info(input_file, x_query, opts)
      return data
    end

    # Query an XML file using XQuery query, get results
    # Return the reuslts of querying a single XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for a single XML document as input.  Provided XML document is automatically loaded as the default context; to access elements in the document, simply refer to them without a document reference, such as bookstore/book
    # @param input_file Input XML file to perform the operation on.
    # @param x_query Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported
    # @param [Hash] opts the optional parameters
    # @return [Array<(XmlQueryWithXQueryResult, Fixnum, Hash)>] XmlQueryWithXQueryResult data, response status code and response headers
    def convert_data_xml_query_with_x_query_with_http_info(input_file, x_query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConvertDataApi.convert_data_xml_query_with_x_query ..."
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ConvertDataApi.convert_data_xml_query_with_x_query"
      end
      # verify the required parameter 'x_query' is set
      if @api_client.config.client_side_validation && x_query.nil?
        fail ArgumentError, "Missing the required parameter 'x_query' when calling ConvertDataApi.convert_data_xml_query_with_x_query"
      end
      # resource path
      local_var_path = "/convert/xml/query/xquery"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      header_params[:'XQuery'] = x_query

      # form parameters
      form_params = {}
      form_params["inputFile"] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'XmlQueryWithXQueryResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConvertDataApi#convert_data_xml_query_with_x_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query multiple XML files using XQuery query, get results
    # Return the reuslts of querying an XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for multiple XML documents as input.  You can refer to the contents of a given document by name, for example doc(\"books.xml\") or doc(\"restaurants.xml\") if you included two input files named books.xml and restaurants.xml.  If input files contain no file name, they will default to file names input1.xml, input2.xml and so on.
    # @param input_file1 First input XML file to perform the operation on.
    # @param x_query Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported
    # @param [Hash] opts the optional parameters
    # @option opts [File] :input_file2 Second input XML file to perform the operation on.
    # @option opts [File] :input_file3 Third input XML file to perform the operation on.
    # @option opts [File] :input_file4 Fourth input XML file to perform the operation on.
    # @option opts [File] :input_file5 Fifth input XML file to perform the operation on.
    # @option opts [File] :input_file6 Sixth input XML file to perform the operation on.
    # @option opts [File] :input_file7 Seventh input XML file to perform the operation on.
    # @option opts [File] :input_file8 Eighth input XML file to perform the operation on.
    # @option opts [File] :input_file9 Ninth input XML file to perform the operation on.
    # @option opts [File] :input_file10 Tenth input XML file to perform the operation on.
    # @return [XmlQueryWithXQueryMultiResult]
    def convert_data_xml_query_with_x_query_multi(input_file1, x_query, opts = {})
      data, _status_code, _headers = convert_data_xml_query_with_x_query_multi_with_http_info(input_file1, x_query, opts)
      return data
    end

    # Query multiple XML files using XQuery query, get results
    # Return the reuslts of querying an XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for multiple XML documents as input.  You can refer to the contents of a given document by name, for example doc(\&quot;books.xml\&quot;) or doc(\&quot;restaurants.xml\&quot;) if you included two input files named books.xml and restaurants.xml.  If input files contain no file name, they will default to file names input1.xml, input2.xml and so on.
    # @param input_file1 First input XML file to perform the operation on.
    # @param x_query Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported
    # @param [Hash] opts the optional parameters
    # @option opts [File] :input_file2 Second input XML file to perform the operation on.
    # @option opts [File] :input_file3 Third input XML file to perform the operation on.
    # @option opts [File] :input_file4 Fourth input XML file to perform the operation on.
    # @option opts [File] :input_file5 Fifth input XML file to perform the operation on.
    # @option opts [File] :input_file6 Sixth input XML file to perform the operation on.
    # @option opts [File] :input_file7 Seventh input XML file to perform the operation on.
    # @option opts [File] :input_file8 Eighth input XML file to perform the operation on.
    # @option opts [File] :input_file9 Ninth input XML file to perform the operation on.
    # @option opts [File] :input_file10 Tenth input XML file to perform the operation on.
    # @return [Array<(XmlQueryWithXQueryMultiResult, Fixnum, Hash)>] XmlQueryWithXQueryMultiResult data, response status code and response headers
    def convert_data_xml_query_with_x_query_multi_with_http_info(input_file1, x_query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConvertDataApi.convert_data_xml_query_with_x_query_multi ..."
      end
      # verify the required parameter 'input_file1' is set
      if @api_client.config.client_side_validation && input_file1.nil?
        fail ArgumentError, "Missing the required parameter 'input_file1' when calling ConvertDataApi.convert_data_xml_query_with_x_query_multi"
      end
      # verify the required parameter 'x_query' is set
      if @api_client.config.client_side_validation && x_query.nil?
        fail ArgumentError, "Missing the required parameter 'x_query' when calling ConvertDataApi.convert_data_xml_query_with_x_query_multi"
      end
      # resource path
      local_var_path = "/convert/xml/query/xquery/multi"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      header_params[:'XQuery'] = x_query

      # form parameters
      form_params = {}
      form_params["inputFile1"] = input_file1
      form_params["inputFile2"] = opts[:'input_file2'] if !opts[:'input_file2'].nil?
      form_params["inputFile3"] = opts[:'input_file3'] if !opts[:'input_file3'].nil?
      form_params["inputFile4"] = opts[:'input_file4'] if !opts[:'input_file4'].nil?
      form_params["inputFile5"] = opts[:'input_file5'] if !opts[:'input_file5'].nil?
      form_params["inputFile6"] = opts[:'input_file6'] if !opts[:'input_file6'].nil?
      form_params["inputFile7"] = opts[:'input_file7'] if !opts[:'input_file7'].nil?
      form_params["inputFile8"] = opts[:'input_file8'] if !opts[:'input_file8'].nil?
      form_params["inputFile9"] = opts[:'input_file9'] if !opts[:'input_file9'].nil?
      form_params["inputFile10"] = opts[:'input_file10'] if !opts[:'input_file10'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'XmlQueryWithXQueryMultiResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConvertDataApi#convert_data_xml_query_with_x_query_multi\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove, delete XML nodes and items matching XPath expression
    # Return the reuslts of editing an XML document by removing all of the nodes that match an input XPath expression
    # @param x_path_expression Valid XML XPath query expression
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [XmlRemoveWithXPathResult]
    def convert_data_xml_remove_with_x_path(x_path_expression, input_file, opts = {})
      data, _status_code, _headers = convert_data_xml_remove_with_x_path_with_http_info(x_path_expression, input_file, opts)
      return data
    end

    # Remove, delete XML nodes and items matching XPath expression
    # Return the reuslts of editing an XML document by removing all of the nodes that match an input XPath expression
    # @param x_path_expression Valid XML XPath query expression
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(XmlRemoveWithXPathResult, Fixnum, Hash)>] XmlRemoveWithXPathResult data, response status code and response headers
    def convert_data_xml_remove_with_x_path_with_http_info(x_path_expression, input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConvertDataApi.convert_data_xml_remove_with_x_path ..."
      end
      # verify the required parameter 'x_path_expression' is set
      if @api_client.config.client_side_validation && x_path_expression.nil?
        fail ArgumentError, "Missing the required parameter 'x_path_expression' when calling ConvertDataApi.convert_data_xml_remove_with_x_path"
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ConvertDataApi.convert_data_xml_remove_with_x_path"
      end
      # resource path
      local_var_path = "/convert/xml/edit/xpath/remove"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])
      header_params[:'XPathExpression'] = x_path_expression

      # form parameters
      form_params = {}
      form_params["inputFile"] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'XmlRemoveWithXPathResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConvertDataApi#convert_data_xml_remove_with_x_path\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Convert XML to JSON conversion
    # Convert an XML string or file into JSON
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def convert_data_xml_to_json(input_file, opts = {})
      data, _status_code, _headers = convert_data_xml_to_json_with_http_info(input_file, opts)
      return data
    end

    # Convert XML to JSON conversion
    # Convert an XML string or file into JSON
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def convert_data_xml_to_json_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConvertDataApi.convert_data_xml_to_json ..."
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ConvertDataApi.convert_data_xml_to_json"
      end
      # resource path
      local_var_path = "/convert/xml/to/json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["inputFile"] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConvertDataApi#convert_data_xml_to_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Transform XML document file with XSLT into a new XML document
    # Convert an XML string or file into JSON
    # @param input_file Input XML file to perform the operation on.
    # @param transform_file Input XSLT file to use to transform the input XML file.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def convert_data_xml_transform_with_xslt_to_xml(input_file, transform_file, opts = {})
      data, _status_code, _headers = convert_data_xml_transform_with_xslt_to_xml_with_http_info(input_file, transform_file, opts)
      return data
    end

    # Transform XML document file with XSLT into a new XML document
    # Convert an XML string or file into JSON
    # @param input_file Input XML file to perform the operation on.
    # @param transform_file Input XSLT file to use to transform the input XML file.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def convert_data_xml_transform_with_xslt_to_xml_with_http_info(input_file, transform_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConvertDataApi.convert_data_xml_transform_with_xslt_to_xml ..."
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling ConvertDataApi.convert_data_xml_transform_with_xslt_to_xml"
      end
      # verify the required parameter 'transform_file' is set
      if @api_client.config.client_side_validation && transform_file.nil?
        fail ArgumentError, "Missing the required parameter 'transform_file' when calling ConvertDataApi.convert_data_xml_transform_with_xslt_to_xml"
      end
      # resource path
      local_var_path = "/convert/xml/transform/xslt/to/xml"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])

      # form parameters
      form_params = {}
      form_params["inputFile"] = input_file
      form_params["transformFile"] = transform_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConvertDataApi#convert_data_xml_transform_with_xslt_to_xml\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
