=begin
#convertapi

#Convert API lets you effortlessly convert file formats and types.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: unset

=end

require "uri"

module CloudmersiveConvertApiClient
  class EditDocumentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Begin editing a document
    # Uploads a document to Cloudmersive to begin a series of one or more editing operations
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def edit_document_begin_editing(input_file, opts = {})
      data, _status_code, _headers = edit_document_begin_editing_with_http_info(input_file, opts)
      return data
    end

    # Begin editing a document
    # Uploads a document to Cloudmersive to begin a series of one or more editing operations
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def edit_document_begin_editing_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_begin_editing ..."
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling EditDocumentApi.edit_document_begin_editing"
      end
      # resource path
      local_var_path = "/convert/edit/begin-editing"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["inputFile"] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_begin_editing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get content of a footer from a DOCX
    # Returns the footer content from a Word Document (DOCX) format file
    # @param req_config 
    # @param [Hash] opts the optional parameters
    # @return [GetDocxHeadersAndFootersResponse]
    def edit_document_docx_get_headers_and_footers(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_get_headers_and_footers_with_http_info(req_config, opts)
      return data
    end

    # Get content of a footer from a DOCX
    # Returns the footer content from a Word Document (DOCX) format file
    # @param req_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetDocxHeadersAndFootersResponse, Fixnum, Hash)>] GetDocxHeadersAndFootersResponse data, response status code and response headers
    def edit_document_docx_get_headers_and_footers_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_get_headers_and_footers ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_get_headers_and_footers"
      end
      # resource path
      local_var_path = "/convert/edit/docx/get-headers-and-footers"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetDocxHeadersAndFootersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_get_headers_and_footers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get styles from a DOCX
    # Returns the styles defined in the Word Document (DOCX) format file
    # @param req_config 
    # @param [Hash] opts the optional parameters
    # @return [GetDocxStylesResponse]
    def edit_document_docx_get_styles(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_get_styles_with_http_info(req_config, opts)
      return data
    end

    # Get styles from a DOCX
    # Returns the styles defined in the Word Document (DOCX) format file
    # @param req_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetDocxStylesResponse, Fixnum, Hash)>] GetDocxStylesResponse data, response status code and response headers
    def edit_document_docx_get_styles_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_get_styles ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_get_styles"
      end
      # resource path
      local_var_path = "/convert/edit/docx/get-styles"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetDocxStylesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_get_styles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get tables in DOCX
    # Returns all the table objects in an Office Word Document (docx)
    # @param req_config 
    # @param [Hash] opts the optional parameters
    # @return [GetDocxTablesResponse]
    def edit_document_docx_get_tables(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_get_tables_with_http_info(req_config, opts)
      return data
    end

    # Get tables in DOCX
    # Returns all the table objects in an Office Word Document (docx)
    # @param req_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetDocxTablesResponse, Fixnum, Hash)>] GetDocxTablesResponse data, response status code and response headers
    def edit_document_docx_get_tables_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_get_tables ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_get_tables"
      end
      # resource path
      local_var_path = "/convert/edit/docx/get-tables"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetDocxTablesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_get_tables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert image into a DOCX
    # Set the footer in a Word Document (DOCX)
    # @param req_config 
    # @param [Hash] opts the optional parameters
    # @return [DocxInsertImageResponse]
    def edit_document_docx_insert_image(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_insert_image_with_http_info(req_config, opts)
      return data
    end

    # Insert image into a DOCX
    # Set the footer in a Word Document (DOCX)
    # @param req_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocxInsertImageResponse, Fixnum, Hash)>] DocxInsertImageResponse data, response status code and response headers
    def edit_document_docx_insert_image_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_insert_image ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_insert_image"
      end
      # resource path
      local_var_path = "/convert/edit/docx/insert-image"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocxInsertImageResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_insert_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert a new table into a DOCX
    # Adds a new table into a DOCX and returns the result
    # @param req_config 
    # @param [Hash] opts the optional parameters
    # @return [InsertDocxTablesResponse]
    def edit_document_docx_insert_table(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_insert_table_with_http_info(req_config, opts)
      return data
    end

    # Insert a new table into a DOCX
    # Adds a new table into a DOCX and returns the result
    # @param req_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InsertDocxTablesResponse, Fixnum, Hash)>] InsertDocxTablesResponse data, response status code and response headers
    def edit_document_docx_insert_table_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_insert_table ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_insert_table"
      end
      # resource path
      local_var_path = "/convert/edit/docx/insert-table"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InsertDocxTablesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_insert_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove headers and footers from DOCX
    # Remove all headers, or footers, or both from a Word Document (DOCX)
    # @param req_config 
    # @param [Hash] opts the optional parameters
    # @return [RemoveDocxHeadersAndFootersResponse]
    def edit_document_docx_remove_headers_and_footers(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_remove_headers_and_footers_with_http_info(req_config, opts)
      return data
    end

    # Remove headers and footers from DOCX
    # Remove all headers, or footers, or both from a Word Document (DOCX)
    # @param req_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RemoveDocxHeadersAndFootersResponse, Fixnum, Hash)>] RemoveDocxHeadersAndFootersResponse data, response status code and response headers
    def edit_document_docx_remove_headers_and_footers_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_remove_headers_and_footers ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_remove_headers_and_footers"
      end
      # resource path
      local_var_path = "/convert/edit/docx/remove-headers-and-footers"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RemoveDocxHeadersAndFootersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_remove_headers_and_footers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace string in DOCX
    # Replace all instances of a string in an Office Word Document (docx)
    # @param req_config 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def edit_document_docx_replace(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_replace_with_http_info(req_config, opts)
      return data
    end

    # Replace string in DOCX
    # Replace all instances of a string in an Office Word Document (docx)
    # @param req_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def edit_document_docx_replace_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_replace ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_replace"
      end
      # resource path
      local_var_path = "/convert/edit/docx/replace-all"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_replace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the footer in a DOCX
    # Set the footer in a Word Document (DOCX)
    # @param req_config 
    # @param [Hash] opts the optional parameters
    # @return [DocxSetFooterResponse]
    def edit_document_docx_set_footer(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_set_footer_with_http_info(req_config, opts)
      return data
    end

    # Set the footer in a DOCX
    # Set the footer in a Word Document (DOCX)
    # @param req_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocxSetFooterResponse, Fixnum, Hash)>] DocxSetFooterResponse data, response status code and response headers
    def edit_document_docx_set_footer_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_set_footer ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_set_footer"
      end
      # resource path
      local_var_path = "/convert/edit/docx/set-footer"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocxSetFooterResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_set_footer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the header in a DOCX
    # Set the header in a Word Document (DOCX)
    # @param req_config 
    # @param [Hash] opts the optional parameters
    # @return [DocxSetHeaderResponse]
    def edit_document_docx_set_header(req_config, opts = {})
      data, _status_code, _headers = edit_document_docx_set_header_with_http_info(req_config, opts)
      return data
    end

    # Set the header in a DOCX
    # Set the header in a Word Document (DOCX)
    # @param req_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocxSetHeaderResponse, Fixnum, Hash)>] DocxSetHeaderResponse data, response status code and response headers
    def edit_document_docx_set_header_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_docx_set_header ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_docx_set_header"
      end
      # resource path
      local_var_path = "/convert/edit/docx/set-header"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocxSetHeaderResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_docx_set_header\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download result from document editing
    # Once done editing a document, download the result.  Begin editing a document by calling begin-editing, then perform operations, then call finish-editing to get the result.
    # @param req_config 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def edit_document_finish_editing(req_config, opts = {})
      data, _status_code, _headers = edit_document_finish_editing_with_http_info(req_config, opts)
      return data
    end

    # Download result from document editing
    # Once done editing a document, download the result.  Begin editing a document by calling begin-editing, then perform operations, then call finish-editing to get the result.
    # @param req_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def edit_document_finish_editing_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_finish_editing ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_finish_editing"
      end
      # resource path
      local_var_path = "/convert/edit/finish-editing"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_finish_editing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace string in PPTX
    # Replace all instances of a string in an Office PowerPoint Document (pptx)
    # @param req_config 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def edit_document_pptx_replace(req_config, opts = {})
      data, _status_code, _headers = edit_document_pptx_replace_with_http_info(req_config, opts)
      return data
    end

    # Replace string in PPTX
    # Replace all instances of a string in an Office PowerPoint Document (pptx)
    # @param req_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def edit_document_pptx_replace_with_http_info(req_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EditDocumentApi.edit_document_pptx_replace ..."
      end
      # verify the required parameter 'req_config' is set
      if @api_client.config.client_side_validation && req_config.nil?
        fail ArgumentError, "Missing the required parameter 'req_config' when calling EditDocumentApi.edit_document_pptx_replace"
      end
      # resource path
      local_var_path = "/convert/edit/pptx/replace-all"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req_config)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EditDocumentApi#edit_document_pptx_replace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
